<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kwon&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/5594e9f17b4feb6e10a6bc1e7107ab0b</icon>
  <subtitle>개발 블로그</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://kyu9341.github.io/"/>
  <updated>2020-04-29T16:50:40.713Z</updated>
  <id>https://kyu9341.github.io/</id>
  
  <author>
    <name>kwon</name>
    <email>kyu9341@naver.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>스프링 부트 - 로그인 및 사용자 인증 정보 참조</title>
    <link href="https://kyu9341.github.io/java/2020/04/30/java_springBootLogin/"/>
    <id>https://kyu9341.github.io/java/2020/04/30/java_springBootLogin/</id>
    <published>2020-04-29T15:12:28.000Z</published>
    <updated>2020-04-29T16:50:40.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="현재-인증된-사용자-정보-참조"><a href="#현재-인증된-사용자-정보-참조" class="headerlink" title="현재 인증된 사용자 정보 참조"></a>현재 인증된 사용자 정보 참조</h2><ul><li>스프링 시큐리티의 스프링 웹 MVC 지원<ul><li><code>@AuthenticationPrincipal</code> : 핸들러 매개변수로 현재 인증된 <strong>Principal</strong> 을 참조할 수 있다.</li><li><strong>Principal</strong> 은 인증 시 authentication에 들어있는 첫 번째 파라미터이다. 아래의 <code>account.getNickname()</code>에 해당.</li></ul></li><li><code>AccountService.java</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    UsernamePasswordAuthenticationToken token = <span class="keyword">new</span> UsernamePasswordAuthenticationToken( <span class="comment">// 토큰 생성</span></span><br><span class="line">            account.getNickname(),</span><br><span class="line">            account.getPassword(),</span><br><span class="line">            List.of(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_USER"</span>)));</span><br><span class="line">    <span class="comment">// 로그인 처리</span></span><br><span class="line">    SecurityContextHolder.getContext().setAuthentication(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>@AuthenticationPrincipal</code>은 SpEL을 사용해서 Principal 내부 정보에 접근할 수도 있다.<ul><li><code>@AuthenticationPrincipal(expression = &quot;#this == &#39;anonymousUser&#39; ? null : account&quot;)</code></li><li>익명 인증인 경우에는 null로 설정하고, 아닌 경우에는 account 프로퍼티를 조회해서 설정하라는 뜻.</li></ul></li><li><code>@AuthenticationPrincipal</code>를 사용하면 <code>UserDetailsService</code>에서 return한 객체를 파라미터로 직접 받아 사용할 수 있다.</li></ul><ul><li><code>@AuthenticationPrincipal(expression = &quot;#this == &#39;anonymousUser&#39; ? null : account&quot;)</code>와 같이 매번 파라미터에 붙이기는 번거롭기 때문에 <code>@CurrentUser</code>라는 커스텀 어노테이션을 생성한다.</li><li><code>CurrentUser.java</code> : 어노테이션 생성<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 런타임 까지 유지</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">// 타겟은 파라미터에만 붙이겠다.</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.PARAMETER)</span><br><span class="line"><span class="comment">// 익명 사용자인 경우에는 null로, 익명 사용자가 아닌 경우에는 실제 account 객체로</span></span><br><span class="line"><span class="comment">// Principal 을 다이나믹 하게 꺼내기 위해 @CurrentUser 생성</span></span><br><span class="line"><span class="meta">@AuthenticationPrincipal</span>(expression = <span class="string">"#this == 'anonymousUser' ? null : account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CurrentUser &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><code>MainController.java</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="comment">// 익명 사용자인 경우에는 null 로, 익명 사용자가 아닌 경우에는 실제 account 객체로</span></span><br><span class="line">    <span class="comment">// Principal 을 다이나믹 하게 꺼내기 위해 @CurrentUser 생성</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">(@CurrentUser Account account, Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(account != <span class="keyword">null</span>)&#123; <span class="comment">// null 이 아니면 인증을 한 사용자</span></span><br><span class="line">            model.addAttribute(account);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>익명 사용자인 경우에는 null을, 익명 사용자가 아닌 경우에는 실제 account 객체를 가져온다.</li><li>하지만 지금 로그인 할 때 사용한 Principal에는 Account라는 프로퍼티가 없다.</li><li>따라서 Account라는 프로퍼티를 가지고 있는 중간 역할을 해줄 수 있는 객체가 필요하다.</li><li>핸들러에서 현재 로그인한 유저의 정보가 필요할 때 위와 같이 사용할 수 있다.</li></ul><ul><li><code>UserAccount.java</code> : 스프링 시큐리티가 다루는 유저 정보와 우리의 도메인에서 다루는 유저 정보 사이의 갭을 매꿔주는 일종의 어댑터 역할<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAccount</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123; <span class="comment">// 스프링 시큐리티의 User를 상속</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Account account;</span><br><span class="line">    <span class="comment">// 스프링 시큐리티가 다루는 유저 정보를 우리가 가지고 있는 도메인의 유저 정보와 연동</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(account.getNickname(), account.getPassword(), List.of(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_USER"</span>)));</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>스프링 시큐리티의 User를 상속받는다.</li><li>UserAccount의 멤버는 Account 객체만이 존재한다.</li><li>생성자의 내부에서 User 클래스의 생성자를 호출하여 username, password, role을 세팅한다.</li></ul><ul><li><code>AccountService.java</code> 의  Principal에 위에서 생성한 AccountUser 객체를 넣는다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        UsernamePasswordAuthenticationToken token = <span class="keyword">new</span> UsernamePasswordAuthenticationToken( <span class="comment">// 토큰 생성</span></span><br><span class="line">                <span class="keyword">new</span> UserAccount(account), <span class="comment">// Principal 객체설정</span></span><br><span class="line">                account.getPassword(),</span><br><span class="line">                List.of(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_USER"</span>)));</span><br><span class="line">        <span class="comment">// 로그인 처리</span></span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(token);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>로그인을 하게 되면 <code>new UserAccount(account)</code>가 인증된 Principal로 간주된다.</li></ul><h2 id="로그인-로그아웃"><a href="#로그인-로그아웃" class="headerlink" title="로그인 / 로그아웃"></a>로그인 / 로그아웃</h2><ul><li>스프링 시큐리티 로그인/로그아웃 설정</li><li><code>SecurityConfig.java</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin()</span><br><span class="line">        .loginPage(<span class="string">"/login"</span>)  <span class="comment">// 커스텀한 로그인 페이지를 보여줄 url</span></span><br><span class="line">        .permitAll(); <span class="comment">// 로그인 폼에 대한 접근 권한</span></span><br><span class="line">http.logout()</span><br><span class="line">        .logoutSuccessUrl(<span class="string">"/"</span>); <span class="comment">// 로그아웃 성공 시 이동할 url</span></span><br></pre></td></tr></table></figure></li><li>위와 같이 설정하고 <code>login.html</code>의 form에서 <code>th:action=&quot;@{/login}&quot; method=&quot;post&quot;</code>와 같이 설정한다면 post로 가는 <code>/login</code> 요청을 <code>formLogin</code>을 처리하는 시큐리티가 처리해준다.<ul><li>따로 <code>/login</code> post를 처리하는 핸들러를 만들 필요가 없음.<ul><li>PasswordEncoder도 Bean으로 등록이 되어있다면 자동으로 사용이 된다. (하나만 있는 경우)</li></ul></li><li>알아서 username과 password를 가지고 로그인을 처리한다. 이 때, 데이터베이스에 저장된 정보를 참조하여 인증을 하여야 하기 때문에 데이터베이스를 조회할 수 있는 <code>UserDetailsService</code>를 구현해야 한다.</li></ul></li></ul><ul><li><code>UserDetailsService</code> 구현<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AccountRepository accountRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String emailOrNickname)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        Account account = accountRepository.findByEmail(emailOrNickname);</span><br><span class="line">        <span class="keyword">if</span>(account == <span class="keyword">null</span>)&#123; <span class="comment">// 이메일로 찾지 못한 경우 닉네임으로 찾는다.</span></span><br><span class="line">            account = accountRepository.findByNickname(emailOrNickname);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(account == <span class="keyword">null</span>)&#123; <span class="comment">// 닉네임으로도 찾지 못한다면 에러를 던짐</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(emailOrNickname);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Principal 에 해당하는 객체를 리턴한다.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>UserDetailsService</code>타입의 빈이 하나만 있으면 스프링 시큐리티에 따로 설정이 필요없다. 자동으로 저 빈을 사용한다.</li><li><code>UserDetailsService</code>에서 return하는 객체는 <code>UserDetails</code>타입이어야 한다.</li><li>따라서 <code>UserDetails</code>를 구현하는 <code>User</code>클래스를 상속받은 <code>UserAccount</code>를 리턴한다.</li></ul><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-JPA-%EC%9B%B9%EC%95%B1/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-JPA-%EC%9B%B9%EC%95%B1/dashboard</a><br><a href="https://pupupee9.tistory.com/137" target="_blank" rel="external nofollow noopener noreferrer">https://pupupee9.tistory.com/137</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;현재-인증된-사용자-정보-참조&quot;&gt;&lt;a href=&quot;#현재-인증된-사용자-정보-참조&quot; class=&quot;headerlink&quot; title=&quot;현재 인증된 사용자 정보 참조&quot;&gt;&lt;/a&gt;현재 인증된 사용자 정보 참조&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;스프링 시큐리티
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>백준 1987번 알파벳</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/29/algorithm1987/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/29/algorithm1987/</id>
    <published>2020-04-28T15:51:12.000Z</published>
    <updated>2020-04-28T16:26:10.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-1987"><a href="#Problem-1987" class="headerlink" title="Problem 1987"></a>Problem 1987</h1><h2 id="알파벳"><a href="#알파벳" class="headerlink" title="알파벳"></a>알파벳</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>세로 R칸, 가로 C칸으로 된 표 모양의 보드가 있다. 보드의 각 칸에는 대문자 알파벳이 하나씩 적혀 있고, 좌측 상단 칸 (1행 1열) 에는 말이 놓여 있다.</p><p>말은 상하좌우로 인접한 네 칸 중의 한 칸으로 이동할 수 있는데, 새로 이동한 칸에 적혀 있는 알파벳은 지금까지 지나온 모든 칸에 적혀 있는 알파벳과는 달라야 한다. 즉, 같은 알파벳이 적힌 칸을 두 번 지날 수 없다.</p><p>좌측 상단에서 시작해서, 말이 최대한 몇 칸을 지날 수 있는지를 구하는 프로그램을 작성하시오. 말이 지나는 칸은 좌측 상단의 칸도 포함된다.</p><h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><p>첫째 줄에 R과 C가 빈칸을 사이에 두고 주어진다. (1 ≤ R,C ≤ 20) 둘째 줄부터 R개의 줄에 걸쳐서 보드에 적혀 있는 C개의 대문자 알파벳들이 빈칸 없이 주어진다.</p><h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>첫째 줄에 말이 지날 수 있는 최대의 칸 수를 출력한다.</p><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://www.acmicpc.net/problem/1987" target="_blank" rel="external nofollow noopener noreferrer">https://www.acmicpc.net/problem/1987</a></p><h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><p>2 4<br>CAAB<br>ADCB</p><h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><p>3</p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>map에 모든 알파벳 대문자를 키로, 벨류를 false로 초기화한다.</li><li>dfs를 수행하며 현재까지 어떤 칸을 지나왔는지 체크하고, 아직 한 번도 지나오지 않은 알파벳인 경우에만 이동한다.</li><li>cnt로 현재까지 이동한 횟수를 카운트하여 최대로 지나온 칸 수를 저장한다.</li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> r, c;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; a;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">bool</span>&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ans = <span class="built_in">max</span>(ans, cnt); <span class="comment">// 이동한 최댓값을 구함</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx[i];</span><br><span class="line"><span class="keyword">int</span> ny = y + dy[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; nx &lt; r &amp;&amp; ny &lt; c) &#123;</span><br><span class="line"><span class="keyword">if</span> (!m[a[nx][ny]]) &#123; <span class="comment">// 아직 한번도 밟지 않은 알파벳인 경우</span></span><br><span class="line">m[a[nx][ny]] = <span class="literal">true</span>; <span class="comment">//  방문 처리</span></span><br><span class="line">dfs(nx, ny, cnt + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">m[a[x][y]] = <span class="literal">false</span>; <span class="comment">// 방문 처리 해제</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c;</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line">a.resize(r);</span><br><span class="line"></span><br><span class="line"><span class="comment">// map에 모든 알파벳 대문자를 키로, 벨류를 false로 초기화</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">m.insert(make_pair(<span class="string">'A'</span> + i, <span class="literal">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line">m[a[<span class="number">0</span>][<span class="number">0</span>]] = <span class="literal">true</span>;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-1987&quot;&gt;&lt;a href=&quot;#Problem-1987&quot; class=&quot;headerlink&quot; title=&quot;Problem 1987&quot;&gt;&lt;/a&gt;Problem 1987&lt;/h1&gt;&lt;h2 id=&quot;알파벳&quot;&gt;&lt;a href=&quot;#알파벳&quot; class
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>백준 11559번 뿌요뿌요(Puyo Puyo)</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/25/algorithm11559/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/25/algorithm11559/</id>
    <published>2020-04-25T07:10:12.000Z</published>
    <updated>2020-04-25T08:03:09.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-11559"><a href="#Problem-11559" class="headerlink" title="Problem 11559"></a>Problem 11559</h1><h2 id="Puyo-Puyo"><a href="#Puyo-Puyo" class="headerlink" title="Puyo Puyo"></a>Puyo Puyo</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>뿌요뿌요의 룰은 다음과 같다.</p><blockquote><p>필드에 여러 가지 색깔의 뿌요를 놓는다. 뿌요는 중력의 영향을 받아 아래에 바닥이나 다른 뿌요가 나올 때까지 아래로 떨어진다.<br>뿌요를 놓고 난 후, 같은 색 뿌요가 4개 이상 상하좌우로 연결되어 있으면 연결된 같은 색 뿌요들이 한꺼번에 없어진다.<br>뿌요들이 없어지고 나서 위에 다른 뿌요들이 있다면, 역시 중력의 영향을 받아 차례대로 아래로 떨어지게 된다.<br>아래로 떨어지고 나서 다시 같은 색의 뿌요들이 4개 이상 모이게 되면 또 터지게 되는데, 터진 후 뿌요들이 내려오고 다시 터짐을 반복할 때마다 1연쇄씩 늘어난다.<br>터질 수 있는 뿌요가 여러 그룹이 있다면 동시에 터져야 하고 여러 그룹이 터지더라도 한번의 연쇄가 추가된다.</p></blockquote><p>남규는 최근 뿌요뿌요 게임에 푹 빠졌다. 이 게임은 1:1로 붙는 대전게임이라 잘 쌓는 것도 중요하지만, 상대방이 터뜨린다면 연쇄가 몇 번이 될지 바로 파악할 수 있는 능력도 필요하다. 하지만 아직 실력이 부족하여 남규는 자기 필드에만 신경 쓰기 바쁘다. 상대방의 필드가 주어졌을 때, 연쇄가 몇 번 연속으로 일어날지 계산하여 남규를 도와주자!</p><h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><p>12*6의 문자가 주어진다.</p><p>이때 .은 빈공간이고 .이 아닌것은 각각의 색깔의 뿌요를 나타낸다.</p><p>R은 빨강, G는 초록, B는 파랑, P는 보라, Y는 노랑이다.(모두 대문자로 주어진다.)</p><p>입력으로 주어지는 필드는 뿌요들이 전부 아래로 떨어진 뒤의 상태(즉 뿌요 아래에 빈 칸이 있는 경우는 없음) 이다.</p><h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>현재 주어진 상황에서 몇연쇄가 되는지 출력하라. (하나도 터지지 않는다면 0을 출력하면 된다.)</p><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://www.acmicpc.net/problem/11559" target="_blank" rel="external nofollow noopener noreferrer">https://www.acmicpc.net/problem/11559</a></p><h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><p>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>.Y….<br>.YG…<br>RRYG..<br>RRYGG.</p><h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><p>3</p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>가장 왼쪽 아래칸부터 dfs를 수행하여 같은 색깔의 뿌요인 경우에만 방문을 하며 이어진 같은 색의 뿌요의 개수를 카운트한다.</li><li>4개 이상 이어진 뿌요가 있다면 이어진 뿌요들을 제거하고 다음 칸을 확인한다.</li><li>한 라운드에 4개 이상 이어진 뿌요가 없는 경우 while문을 빠져나가고 아니라면 연쇄 횟수를 1증가시키고 제거된 뿌요의 자리에 중력을 적용시킨 후 반복한다.<ul><li>fall함수는 각 열에서 가장 아래의 행부터 시작하여 현재 행이 빈칸이고 위에 뿌요가 있는 경우 현재 행의 칸에 위의 뿌요를 이동시키고 위 뿌요의 자리에 빈칸을 넣어준다.</li><li>이 과정을 더이상 빈 칸 위에 뿌요가 없을 때까지 반복한다.</li></ul></li></ul><hr><ul><li>dfs함수 내에서 모여있는 뿌요를 제거하려 했는데 4개가 넘는 뿌요가 모여있는 경우가 제대로 처리가 안돼서 애를 좀 먹었다.</li><li>제거하는 함수를 따로 작성하여 이번 dfs에서 체크된 부분만 제거하도록 하여 해결하였다.</li><li>질문게시판에 좋은 반례가 있어 남겨놓는다.<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Y</span>..<span class="selector-class">.YR</span></span><br><span class="line"><span class="selector-tag">B</span><span class="selector-class">.RGGY</span></span><br><span class="line"><span class="selector-tag">R</span><span class="selector-class">.GGYY</span></span><br><span class="line"><span class="selector-tag">G</span><span class="selector-class">.RYGR</span></span><br><span class="line"><span class="selector-tag">YGYGRR</span></span><br><span class="line"><span class="selector-tag">YBRYGY</span></span><br><span class="line"><span class="selector-tag">RRYYGY</span></span><br><span class="line"><span class="selector-tag">YYRBRB</span></span><br><span class="line"><span class="selector-tag">YRBGBB</span></span><br><span class="line"><span class="selector-tag">GBRBGR</span></span><br><span class="line"><span class="selector-tag">GBRBGR</span></span><br><span class="line"><span class="selector-tag">GBRBGR</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">answer</span>: 14</span><br></pre></td></tr></table></figure></li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> m = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; a(n);</span><br><span class="line"><span class="keyword">bool</span> check[n][m];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fall</span><span class="params">()</span> </span>&#123; <span class="comment">// 뿌요를 떨어뜨리는 함수</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 각 열별로 현재 행이 비었고 위의 행에 뿌요가 있는 경우</span></span><br><span class="line"><span class="comment">// 뿌요를 한 칸 내린다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="string">'.'</span> &amp;&amp; a[i - <span class="number">1</span>][j] != <span class="string">'.'</span>) &#123;</span><br><span class="line">a[i][j] = a[i - <span class="number">1</span>][j];</span><br><span class="line">a[i - <span class="number">1</span>][j] = <span class="string">'.'</span>;</span><br><span class="line">ok = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!ok) <span class="keyword">break</span>; <span class="comment">// 더이상 내릴 뿌요가 없을때 종료</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">char</span> pre)</span> </span>&#123;</span><br><span class="line">check[x][y] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx[i];</span><br><span class="line"><span class="keyword">int</span> ny = y + dy[i];</span><br><span class="line"><span class="comment">// 범위 내에서 이전 뿌요와 같은 색이고 방문하지 않은 경우</span></span><br><span class="line"><span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &lt; m) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[nx][ny] &amp;&amp; pre == a[nx][ny]) &#123;</span><br><span class="line">idx++;</span><br><span class="line">dfs(nx, ny, a[x][y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; <span class="comment">// 확인용 출력함수</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// dfs로 4개 이상의 뿌요가 뭉친 경우 뿌요를 삭제하는 함수</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i][j]) &#123;</span><br><span class="line">a[i][j] = <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">getline(<span class="built_in">cin</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 가장 왼쪽 아래부터 확인</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">idx = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(check, <span class="literal">false</span>, <span class="keyword">sizeof</span>(check)); <span class="comment">// check초기화</span></span><br><span class="line"><span class="keyword">if</span> (a[i][j] != <span class="string">'.'</span>) &#123; <span class="comment">// 뿌요가 있는경우만 dfs수행</span></span><br><span class="line">dfs(i, j, a[i][j]);</span><br><span class="line"><span class="keyword">if</span>(idx &gt;= <span class="number">4</span>)&#123;</span><br><span class="line">ok = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">remove</span>(); <span class="comment">// 4개 이상 모인 뿌요 제거</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!ok) <span class="keyword">break</span>; <span class="comment">// 더 이상 4개 이상 모인것이 없으면 종료</span></span><br><span class="line">fall(); <span class="comment">// 떨어뜨린다.</span></span><br><span class="line">ans++; <span class="comment">// 한 라운드가 끝나면 연쇄 횟수 카운트</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-11559&quot;&gt;&lt;a href=&quot;#Problem-11559&quot; class=&quot;headerlink&quot; title=&quot;Problem 11559&quot;&gt;&lt;/a&gt;Problem 11559&lt;/h1&gt;&lt;h2 id=&quot;Puyo-Puyo&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>백준 2206번 벽 부수고 이동하기</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/24/algorithm2206/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/24/algorithm2206/</id>
    <published>2020-04-24T14:21:12.000Z</published>
    <updated>2020-04-24T14:30:58.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-2206"><a href="#Problem-2206" class="headerlink" title="Problem 2206"></a>Problem 2206</h1><h2 id="벽-부수고-이동하기"><a href="#벽-부수고-이동하기" class="headerlink" title="벽 부수고 이동하기"></a>벽 부수고 이동하기</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>N×M의 행렬로 표현되는 맵이 있다. 맵에서 0은 이동할 수 있는 곳을 나타내고, 1은 이동할 수 없는 벽이 있는 곳을 나타낸다. 당신은 (1, 1)에서 (N, M)의 위치까지 이동하려 하는데, 이때 최단 경로로 이동하려 한다. 최단경로는 맵에서 가장 적은 개수의 칸을 지나는 경로를 말하는데, 이때 시작하는 칸과 끝나는 칸도 포함해서 센다.</p><p>만약에 이동하는 도중에 한 개의 벽을 부수고 이동하는 것이 좀 더 경로가 짧아진다면, 벽을 한 개 까지 부수고 이동하여도 된다.</p><p>맵이 주어졌을 때, 최단 경로를 구해 내는 프로그램을 작성하시오.</p><h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><p>첫째 줄에 N(1 ≤ N ≤ 1,000), M(1 ≤ M ≤ 1,000)이 주어진다. 다음 N개의 줄에 M개의 숫자로 맵이 주어진다. (1, 1)과 (N, M)은 항상 0이라고 가정하자.</p><h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>첫째 줄에 최단 거리를 출력한다. 불가능할 때는 -1을 출력한다.</p><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://www.acmicpc.net/problem/2206" target="_blank" rel="external nofollow noopener noreferrer">https://www.acmicpc.net/problem/2206</a></p><h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><p>6 4<br>0100<br>1110<br>1000<br>0000<br>0111<br>0000</p><h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><p>15</p><h3 id="예제-입력-2"><a href="#예제-입력-2" class="headerlink" title="예제 입력 2"></a>예제 입력 2</h3><p>4 4<br>0111<br>1111<br>1111<br>1110</p><h3 id="예제-출력-2"><a href="#예제-출력-2" class="headerlink" title="예제 출력 2"></a>예제 출력 2</h3><p>-1</p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>bfs를 이용하여 큐에 좌표와 벽을 부쉈는지 여부를 담는다.</li><li>3차원 배열 dist를 -1로 초기화하고 각 위치, 벽을 부쉈는지 여부에 해당하는 이동거리를 담는다.</li><li>bfs를 수행하며 다음 위치가 이동 가능하다면 그냥 이동하는 경우와 다음 위치가 벽인데 아직 부수지 않았을 때 벽을 부수고 이동하는 경우를 모두 큐에 넣어 확인한다.</li><li>목적지까지 도달 가능하다면 벽을 부순 경우와 부수지 않은 경우중 더 짧은 경로를 리턴한다.</li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dist[MAX][MAX][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dy[] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">q.push(&#123; &#123;<span class="number">0</span>, <span class="number">0</span>&#125;, <span class="number">0</span> &#125;);</span><br><span class="line">dist[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front().first.first;</span><br><span class="line"><span class="keyword">int</span> y = q.front().first.second;</span><br><span class="line"><span class="keyword">int</span> check = q.front().second; <span class="comment">// 벽을 부쉈는지 여부</span></span><br><span class="line"></span><br><span class="line">q.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx[i];</span><br><span class="line"><span class="keyword">int</span> ny = y + dy[i];</span><br><span class="line"><span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &lt; m) &#123;</span><br><span class="line"><span class="comment">// 중복이 아닌 경우만 확인</span></span><br><span class="line"><span class="keyword">if</span> (dist[nx][ny][check] == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[nx][ny] == <span class="number">0</span>) &#123; <span class="comment">// 다음 위치가 이동 가능하다면 그냥 이동</span></span><br><span class="line">q.push(&#123; &#123; nx, ny &#125;, check &#125;);</span><br><span class="line">dist[nx][ny][check] = dist[x][y][check] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[nx][ny] == <span class="number">1</span> &amp;&amp; check == <span class="number">0</span>)&#123; <span class="comment">// 다음 위치가 벽인데 아직 부수지 않았다면</span></span><br><span class="line">q.push(&#123; &#123;nx, ny&#125;, <span class="number">1</span> &#125;); <span class="comment">// 벽을 부수고 이동하는 경우 추가</span></span><br><span class="line">dist[nx][ny][<span class="number">1</span>] = dist[x][y][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 벽을 부수는 경우와 부수지 않는 경우 모두 도착할 수 있다면 더작은 값 리턴</span></span><br><span class="line"><span class="keyword">if</span> (dist[n - <span class="number">1</span>][m - <span class="number">1</span>][<span class="number">0</span>] != <span class="number">-1</span> &amp;&amp; dist[n - <span class="number">1</span>][m - <span class="number">1</span>][<span class="number">1</span>] != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(dist[n - <span class="number">1</span>][m - <span class="number">1</span>][<span class="number">0</span>], dist[n - <span class="number">1</span>][m - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 둘다 도착하지 못했다면 -1, 하나만 도착했다면 그 거리를 리턴</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(dist[n - <span class="number">1</span>][m - <span class="number">1</span>][<span class="number">0</span>], dist[n - <span class="number">1</span>][m - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; wall;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">string</span> input;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">a[i][j] = input[j] - <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bfs() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-2206&quot;&gt;&lt;a href=&quot;#Problem-2206&quot; class=&quot;headerlink&quot; title=&quot;Problem 2206&quot;&gt;&lt;/a&gt;Problem 2206&lt;/h1&gt;&lt;h2 id=&quot;벽-부수고-이동하기&quot;&gt;&lt;a href=&quot;#벽-부
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>백준 5052번 전화번호 목록</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/24/algorithm5052/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/24/algorithm5052/</id>
    <published>2020-04-23T16:51:12.000Z</published>
    <updated>2020-04-23T17:24:33.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-5052"><a href="#Problem-5052" class="headerlink" title="Problem 5052"></a>Problem 5052</h1><h2 id="전화번호-목록"><a href="#전화번호-목록" class="headerlink" title="전화번호 목록"></a>전화번호 목록</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>전화번호 목록이 주어진다. 이때, 이 목록이 일관성이 있는지 없는지를 구하는 프로그램을 작성하시오.</p><p>전화번호 목록이 일관성을 유지하려면, 한 번호가 다른 번호의 접두어인 경우가 없어야 한다.</p><p>예를 들어, 전화번호 목록이 아래와 같은 경우를 생각해보자</p><ul><li>긴급전화: 911</li><li>상근: 97 625 999</li><li>선영: 91 12 54 26<br>이 경우에 선영이에게 전화를 걸 수 있는 방법이 없다. 전화기를 들고 선영이 번호의 처음 세 자리를 누르는 순간 바로 긴급전화가 걸리기 때문이다. 따라서, 이 목록은 일관성이 없는 목록이다.</li></ul><h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><p>첫째 줄에 테스트 케이스의 개수 t가 주어진다. (1 ≤ t ≤ 50) 각 테스트 케이스의 첫째 줄에는 전화번호의 수 n이 주어진다. (1 ≤ n ≤ 10000) 다음 n개의 줄에는 목록에 포함되어 있는 전화번호가 하나씩 주어진다. 전화번호의 길이는 길어야 10자리이며, 목록에 있는 두 전화번호가 같은 경우는 없다.</p><h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>각 테스트 케이스에 대해서, 일관성 있는 목록인 경우에는 YES, 아닌 경우에는 NO를 출력한다.</p><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://www.acmicpc.net/problem/5052" target="_blank" rel="external nofollow noopener noreferrer">https://www.acmicpc.net/problem/5052</a></p><h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><p>2<br>3<br>911<br>97625999<br>91125426<br>5<br>113<br>12340<br>123440<br>12345<br>98346</p><h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><p>NO<br>YES</p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>프로그래머스의 전화번호 목록 문제와 똑같은 문제이다.</li><li>문자열을 오름차순 정렬한다.<ul><li>예제를 오름차순 정렬하면 다음과 같다.<ul><li>ex1) 911, 91125426, 97625999</li></ul></li></ul></li><li>다른 번호의 접두사가 되는 번호가 있다면 반드시 접두가가 되는 번호 뒤에 접두사로 가지는 번호가 오게 된다.</li><li>접두사가 되는 경우가 하나라도 있는지 유무만 판별하는 문제이므로<ul><li>정렬된 상태에서 바로 다음 문자열이 현재 문자열로 시작하는 경우가 있는지 판별한다.</li></ul></li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; numbers(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; numbers[i];</span><br><span class="line"><span class="comment">// 문자열을 오름차순 정렬</span></span><br><span class="line">sort(numbers.<span class="built_in">begin</span>(), numbers.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">bool</span> check = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 정렬된 상태이므로 바로 다음 문자열이 현재 문자열로 시작하는지 확인</span></span><br><span class="line"><span class="keyword">if</span> (numbers[i].<span class="built_in">size</span>() &lt;= numbers[i + <span class="number">1</span>].<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (numbers[i] == numbers[i + <span class="number">1</span>].substr(<span class="number">0</span>, numbers[i].<span class="built_in">size</span>())) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">check = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!check) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-5052&quot;&gt;&lt;a href=&quot;#Problem-5052&quot; class=&quot;headerlink&quot; title=&quot;Problem 5052&quot;&gt;&lt;/a&gt;Problem 5052&lt;/h1&gt;&lt;h2 id=&quot;전화번호-목록&quot;&gt;&lt;a href=&quot;#전화번호-목
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 등굣길</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/24/programmers_42898/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/24/programmers_42898/</id>
    <published>2020-04-23T15:51:12.000Z</published>
    <updated>2020-04-23T16:59:11.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-등굣길"><a href="#프로그래머스-등굣길" class="headerlink" title="프로그래머스 - 등굣길"></a>프로그래머스 - 등굣길</h1><h2 id="등굣길"><a href="#등굣길" class="headerlink" title="등굣길"></a>등굣길</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>계속되는 폭우로 일부 지역이 물에 잠겼습니다. 물에 잠기지 않은 지역을 통해 학교를 가려고 합니다. 집에서 학교까지 가는 길은 m x n 크기의 격자모양으로 나타낼 수 있습니다.</p><p>아래 그림은 m = 4, n = 3 인 경우입니다.</p><p>가장 왼쪽 위, 즉 집이 있는 곳의 좌표는 (1, 1)로 나타내고 가장 오른쪽 아래, 즉 학교가 있는 곳의 좌표는 (m, n)으로 나타냅니다.</p><p>격자의 크기 m, n과 물이 잠긴 지역의 좌표를 담은 2차원 배열 puddles이 매개변수로 주어집니다. 집에서 학교까지 갈 수 있는 최단경로의 개수를 1,000,000,007로 나눈 나머지를 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul><li>격자의 크기 m, n은 1 이상 100 이하인 자연수입니다.<ul><li>m과 n이 모두 1인 경우는 입력으로 주어지지 않습니다.</li></ul></li><li>물에 잠긴 지역은 0개 이상 10개 이하입니다.</li><li>집과 학교가 물에 잠긴 경우는 입력으로 주어지지 않습니다.</li></ul><h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3><p>m    n    puddles    return<br>4    3    [[2, 2]]    4</p><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42898" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/42898</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>그림만 보고 dfs, bfs문제인가 했지만 dp문제였다..</li><li>점화식은 다음과 같이 세울 수 있다.<ul><li>d[m][n] = (m, n)까지 오는 최단 거리의 개수<ul><li>d[m][n] = d[m - 1][n] + d[m][n - 1]</li></ul></li></ul></li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> d[MAX + <span class="number">1</span>][MAX + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; puddles)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 초기값 설정</span></span><br><span class="line">d[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">d[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">d[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 물에 잠긴 위치 표시</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; puddles.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">d[puddles[i][<span class="number">0</span>]][puddles[i][<span class="number">1</span>]] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// d[m][n] = (m, n)까지 오는 최단 거리의 개수</span></span><br><span class="line"><span class="comment">// d[m][n] = d[m - 1][n] + d[m][n - 1]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (d[i][j] == <span class="number">-1</span>)</span><br><span class="line">d[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(d[i][j] == <span class="number">0</span>)</span><br><span class="line">d[i][j] = d[i - <span class="number">1</span>][j] + d[i][j - <span class="number">1</span>];</span><br><span class="line">d[i][j] %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">answer = d[m][n] % mod;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-등굣길&quot;&gt;&lt;a href=&quot;#프로그래머스-등굣길&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 등굣길&quot;&gt;&lt;/a&gt;프로그래머스 - 등굣길&lt;/h1&gt;&lt;h2 id=&quot;등굣길&quot;&gt;&lt;a href=&quot;#등굣길&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 오픈채팅방</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/22/programmers_42888/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/22/programmers_42888/</id>
    <published>2020-04-22T04:51:12.000Z</published>
    <updated>2020-04-22T16:42:27.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-오픈채팅방"><a href="#프로그래머스-오픈채팅방" class="headerlink" title="프로그래머스 - 오픈채팅방"></a>프로그래머스 - 오픈채팅방</h1><h2 id="오픈채팅방"><a href="#오픈채팅방" class="headerlink" title="오픈채팅방"></a>오픈채팅방</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>카카오톡 오픈채팅방에서는 친구가 아닌 사람들과 대화를 할 수 있는데, 본래 닉네임이 아닌 가상의 닉네임을 사용하여 채팅방에 들어갈 수 있다.</p><p>신입사원인 김크루는 카카오톡 오픈 채팅방을 개설한 사람을 위해, 다양한 사람들이 들어오고, 나가는 것을 지켜볼 수 있는 관리자창을 만들기로 했다. 채팅방에 누군가 들어오면 다음 메시지가 출력된다.</p><p>[닉네임]님이 들어왔습니다.</p><p>채팅방에서 누군가 나가면 다음 메시지가 출력된다.</p><p>[닉네임]님이 나갔습니다.</p><p>채팅방에서 닉네임을 변경하는 방법은 다음과 같이 두 가지이다.</p><ul><li>채팅방을 나간 후, 새로운 닉네임으로 다시 들어간다.</li><li>채팅방에서 닉네임을 변경한다.<br>닉네임을 변경할 때는 기존에 채팅방에 출력되어 있던 메시지의 닉네임도 전부 변경된다.</li></ul><p>예를 들어, 채팅방에 Muzi와 Prodo라는 닉네임을 사용하는 사람이 순서대로 들어오면 채팅방에는 다음과 같이 메시지가 출력된다.</p><p>Muzi님이 들어왔습니다.<br>Prodo님이 들어왔습니다.</p><p>채팅방에 있던 사람이 나가면 채팅방에는 다음과 같이 메시지가 남는다.</p><p>Muzi님이 들어왔습니다.<br>Prodo님이 들어왔습니다.<br>Muzi님이 나갔습니다.</p><p>Muzi가 나간후 다시 들어올 때, Prodo 라는 닉네임으로 들어올 경우 기존에 채팅방에 남아있던 Muzi도 Prodo로 다음과 같이 변경된다.</p><p>Prodo님이 들어왔습니다.<br>Prodo님이 들어왔습니다.<br>Prodo님이 나갔습니다.<br>Prodo님이 들어왔습니다.</p><p>채팅방은 중복 닉네임을 허용하기 때문에, 현재 채팅방에는 Prodo라는 닉네임을 사용하는 사람이 두 명이 있다. 이제, 채팅방에 두 번째로 들어왔던 Prodo가 Ryan으로 닉네임을 변경하면 채팅방 메시지는 다음과 같이 변경된다.</p><p>Prodo님이 들어왔습니다.<br>Ryan님이 들어왔습니다.<br>Prodo님이 나갔습니다.<br>Prodo님이 들어왔습니다.</p><p>채팅방에 들어오고 나가거나, 닉네임을 변경한 기록이 담긴 문자열 배열 record가 매개변수로 주어질 때, 모든 기록이 처리된 후, 최종적으로 방을 개설한 사람이 보게 되는 메시지를 문자열 배열 형태로 return 하도록 solution 함수를 완성하라.</p><h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul><li>record는 다음과 같은 문자열이 담긴 배열이며, 길이는 1 이상 100,000 이하이다.</li><li>다음은 record에 담긴 문자열에 대한 설명이다.<ul><li>모든 유저는 [유저 아이디]로 구분한다.</li><li>[유저 아이디] 사용자가 [닉네임]으로 채팅방에 입장 - Enter [유저 아이디] [닉네임] (ex. Enter uid1234 Muzi)</li><li>[유저 아이디] 사용자가 채팅방에서 퇴장 - Leave [유저 아이디] (ex. Leave uid1234)</li><li>[유저 아이디] 사용자가 닉네임을 [닉네임]으로 변경 - Change [유저 아이디] [닉네임] (ex. Change uid1234 Muzi)</li><li>첫 단어는 Enter, Leave, Change 중 하나이다.</li><li>각 단어는 공백으로 구분되어 있으며, 알파벳 대문자, 소문자, 숫자로만 이루어져있다.</li><li>유저 아이디와 닉네임은 알파벳 대문자, 소문자를 구별한다.</li><li>유저 아이디와 닉네임의 길이는 1 이상 10 이하이다.</li><li>채팅방에서 나간 유저가 닉네임을 변경하는 등 잘못 된 입력은 주어지지 않는다.</li></ul></li></ul><h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3><p>record    result<br>[“Enter uid1234 Muzi”, “Enter uid4567 Prodo”,”Leave uid1234”,”Enter uid1234 Prodo”,”Change uid4567 Ryan”]    [“Prodo님이 들어왔습니다.”, “Ryan님이 들어왔습니다.”, “Prodo님이 나갔습니다.”, “Prodo님이 들어왔습니다.”]</p><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42888" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/42888</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>입력 문자열을 분리하여 맨 앞의 단어에 따라 주어진 조건을 처리한다.<ul><li>Enter인 경우 해쉬맵에 uid를 키값으로 하고 nickname을 벨류값으로 저장하고, check에 true, order에 uid를 넣어 어떤 유저가 들어왔었는지 기록한다.</li><li>Leave인 경우 check에 false, order에 uid를 넣어 어떤 유저가 나갔었는지 기록한다.</li><li>Change인 경우 해쉬 맵의 해당 uid를 키로 하는 벨류 값을 변경한다.</li></ul></li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; check;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; solution(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; record) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; answer;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; hash_map;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; record.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="built_in">string</span> tmp = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; record[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line"><span class="comment">// 띄어쓰기 또는 문자열의 마지막마다 끊어서 저장</span></span><br><span class="line"><span class="keyword">if</span> (record[i][j] == <span class="string">' '</span> || j == record[i].<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == record[i].<span class="built_in">size</span>() - <span class="number">1</span>) v.push_back(tmp + record[i][j]);</span><br><span class="line"><span class="keyword">else</span> v.push_back(tmp);</span><br><span class="line">tmp = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tmp += record[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (v[<span class="number">0</span>] == <span class="string">"Enter"</span>) &#123; <span class="comment">// Enter</span></span><br><span class="line">check.push_back(<span class="literal">true</span>);</span><br><span class="line">order.push_back(v[<span class="number">1</span>]);</span><br><span class="line">hash_map[v[<span class="number">1</span>]] = v[<span class="number">2</span>]; <span class="comment">// 해쉬맵에 uid를 키값으로 하고 nickname을 벨류값으로 저장</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (v[<span class="number">0</span>] == <span class="string">"Leave"</span>) &#123; <span class="comment">// Leave</span></span><br><span class="line">check.push_back(<span class="literal">false</span>);</span><br><span class="line">order.push_back(v[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// Change</span></span><br><span class="line">hash_map[v[<span class="number">1</span>]] = v[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; order.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="built_in">string</span> inout = check[i] == <span class="number">1</span> ? <span class="string">"님이 들어왔습니다."</span> : <span class="string">"님이 나갔습니다."</span>;</span><br><span class="line">answer.push_back(hash_map[order[i]] + inout);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-오픈채팅방&quot;&gt;&lt;a href=&quot;#프로그래머스-오픈채팅방&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 오픈채팅방&quot;&gt;&lt;/a&gt;프로그래머스 - 오픈채팅방&lt;/h1&gt;&lt;h2 id=&quot;오픈채팅방&quot;&gt;&lt;a href=&quot;#오픈채팅
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 구명보트</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/21/programmers_42885/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/21/programmers_42885/</id>
    <published>2020-04-21T02:51:12.000Z</published>
    <updated>2020-04-21T05:43:52.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-구명보트"><a href="#프로그래머스-구명보트" class="headerlink" title="프로그래머스 - 구명보트"></a>프로그래머스 - 구명보트</h1><h2 id="구명보트"><a href="#구명보트" class="headerlink" title="구명보트"></a>구명보트</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>무인도에 갇힌 사람들을 구명보트를 이용하여 구출하려고 합니다. 구명보트는 작아서 한 번에 최대 2명씩 밖에 탈 수 없고, 무게 제한도 있습니다.</p><p>예를 들어, 사람들의 몸무게가 [70kg, 50kg, 80kg, 50kg]이고 구명보트의 무게 제한이 100kg이라면 2번째 사람과 4번째 사람은 같이 탈 수 있지만 1번째 사람과 3번째 사람의 무게의 합은 150kg이므로 구명보트의 무게 제한을 초과하여 같이 탈 수 없습니다.</p><p>구명보트를 최대한 적게 사용하여 모든 사람을 구출하려고 합니다.</p><p>사람들의 몸무게를 담은 배열 people과 구명보트의 무게 제한 limit가 매개변수로 주어질 때, 모든 사람을 구출하기 위해 필요한 구명보트 개수의 최솟값을 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul><li>무인도에 갇힌 사람은 1명 이상 50,000명 이하입니다.</li><li>각 사람의 몸무게는 40kg 이상 240kg 이하입니다.</li><li>구명보트의 무게 제한은 40kg 이상 240kg 이하입니다.</li><li>구명보트의 무게 제한은 항상 사람들의 몸무게 중 최댓값보다 크게 주어지므로 사람들을 구출할 수 없는 경우는 없습니다.</li></ul><h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3><p>people    limit    return<br>[70, 50, 80, 50]    100    3<br>[70, 80, 50]    100    3</p><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42885" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/42885</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>사람들의 무게가 담긴 벡터를 내림차순 정렬한다.</li><li>right에 가장 가벼운 사람의 위치를 저장한다.</li><li>남은 사람들 중 가장 무거운 사람을 선택하고 남은 사람들 중 가장 가벼운 사람의 무게를 차례로 누적한다.<ul><li>누적될 무게가 limit보다 작거나 같은 동안 가장 가벼운 사람이 무게를 누적하고 right를 1줄여 다음 가장 가벼운 사람을 찾는다.</li></ul></li><li>위를 반복하다가 가장 무거운 사람의 인덱스가 더 커진다면 바로 종료하고,</li><li>현재 가장 무거운 사람와 가장 가벼운 사람의 인덱스가 같아지면 마지막 보트를 추가하고 종료한다.</li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; people, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 내림차순 정렬</span></span><br><span class="line">sort(people.<span class="built_in">begin</span>(), people.<span class="built_in">end</span>(), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line"><span class="keyword">int</span> right = people.<span class="built_in">size</span>() - <span class="number">1</span>; <span class="comment">// 가장 가벼운 사람의 위치</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; people.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == right) &#123; <span class="comment">// 같아지는 경우 마지막 보트를 추가하고 종료</span></span><br><span class="line">answer++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i &gt; right) <span class="keyword">break</span>; <span class="comment">// 모든 인원을 태운 경우</span></span><br><span class="line"><span class="keyword">int</span> sum = people[i]; <span class="comment">// 누적될 무게 초기화</span></span><br><span class="line"><span class="keyword">while</span> (sum + people[right] &lt;= limit) &#123;</span><br><span class="line">sum += people[right--]; <span class="comment">// 남은 사람 중 가장 가벼운 사람을 태운다.</span></span><br><span class="line">&#125;</span><br><span class="line">answer++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-구명보트&quot;&gt;&lt;a href=&quot;#프로그래머스-구명보트&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 구명보트&quot;&gt;&lt;/a&gt;프로그래머스 - 구명보트&lt;/h1&gt;&lt;h2 id=&quot;구명보트&quot;&gt;&lt;a href=&quot;#구명보트&quot; cla
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 - 유효성 검사</title>
    <link href="https://kyu9341.github.io/java/2020/04/21/java_springBootVaildation/"/>
    <id>https://kyu9341.github.io/java/2020/04/21/java_springBootVaildation/</id>
    <published>2020-04-20T16:12:28.000Z</published>
    <updated>2020-04-21T07:33:06.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="유효성-검사"><a href="#유효성-검사" class="headerlink" title="유효성 검사"></a>유효성 검사</h3><ul><li>폼 데이터가 적합한지 체크하는 기능은 스프링이 제공해주는 Validator 인터페이스를 구현하거나, JSR 303 Validation을 사용하는 방법이 있다.</li><li>백기선님의 스프링 강좌 내용을 가져와 예시로 적용하였다.</li></ul><h4 id="회원가입-폼-검증-JSR-303-어노테이션-검증"><a href="#회원가입-폼-검증-JSR-303-어노테이션-검증" class="headerlink" title="회원가입 폼 검증 - JSR 303 어노테이션 검증"></a>회원가입 폼 검증 - JSR 303 어노테이션 검증</h4><ul><li><p>값의 길이나 필수값 등을 검증한다.</p></li><li><p><code>AccountController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SignUpFormValidator signUpFormValidator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder</span>(<span class="string">"signUpForm"</span>) <span class="comment">// signUpForm 이라는 데이터를 받을 때 바인더를 설정</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder webDataBinder)</span></span>&#123;</span><br><span class="line">        <span class="comment">// Validator를 추가</span></span><br><span class="line">        <span class="comment">// SignUpForm 의 타입과 매핑이되어 Validator가 사용됨.</span></span><br><span class="line">        webDataBinder.addValidators(signUpFormValidator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sign-up"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">signUpForm</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"signUpForm"</span>, <span class="keyword">new</span> SignUpForm());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"account/sign-up"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/sign-up"</span>) <span class="comment">// 파라미터에서는 @ModelAttribute 생략 가능</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">signUpSubmit</span><span class="params">(@Valid @ModelAttribute SignUpForm signUpForm, Errors errors)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// @Valid : jsr 303 어노테이션들의 조건을 만족하는지 확인</span></span><br><span class="line">        <span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"account/sign-up"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// @InitBinder로 대체</span></span><br><span class="line"><span class="comment">/*        signUpFormValidator.validate(signUpForm, errors);</span></span><br><span class="line"><span class="comment">        if (errors.hasErrors()) &#123;</span></span><br><span class="line"><span class="comment">            return "account/sign-up";</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 회원 가입 처리</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@ModelAttribute</code></p></li><li><p><strong>매개변수로 선언하는 경우</strong></p><ul><li>파라미터로 넘겨 준 타입의 오브젝트를 자동으로 생성 (이때, <code>@ModelAttribute</code>가 지정되는 클래스는 getter와 setter가 명명 규칙에 맞게 만들어져 있어야 한다.)</li><li>생성된 오브젝트에 HTTP로 넘어온 값들을 자동으로 바인딩한다. 위의 코드에서는 SignUpForm에 있는 nickname, email, password 속성 값들이 해당 변수의 setter를 통해 해당 멤버 변수에게로 binding 된다.</li><li><code>@ModelAttribute</code>어노테이션이 붙은 객체가 자동으로 Model객체에 추가된다.</li><li>위와 같이 파라미터에 붙이는 경우에는 생략이 가능하다.</li></ul></li><li><p><strong>메소드에 선언하는 경우</strong></p><ul><li>View에서 사용할 데이터를 설정하는 용도로 사용</li><li><code>@ModelAttribute</code>가 설정된 메소드는 <code>@RequestMapping</code>어노테이션이 적용된 메소드보다 먼저 호출</li><li><code>@ModelAttribute</code> 메소드 실행 결과로 리턴되는 객체는 자동으로 Model에 저장</li><li><code>@ModelAttribute</code> 메소드 실행 결과로 리턴된 객체를 View 페이지에서 사용 가능</li></ul></li><li><p><code>@Valid</code> : 요청 데이터를 검증하는 어노테이션</p></li><li><p><code>@Valid</code>를 이용한 자동 검증</p><ul><li>컨트롤러 메소드의 <code>@ModelAttribute</code> 파라미터에 <code>@Valid</code> 애노테이션을 추가한다. 그러면 validate() 메소드를 실행하는 대신 바인딩 과정에서 자동으로 검증이 진행된다.</li><li>Validation 과정에서 실패하거나 에러가 발생하면 <code>Errors</code>에 에러들이 담기게 된다.<ul><li><code>errors.hasErrors()</code>를 이용하여 에러 발생 시 예외처리를 할 수 있다.</li></ul></li></ul></li></ul><hr><ul><li><code>SignUpForm.java</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUpForm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span> <span class="comment">// 비어있는 값이면 안됨.</span></span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">3</span>, max = <span class="number">20</span>) <span class="comment">// 문자열의 길이 지정 3 ~ 20</span></span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^[ㄱ-ㅎ가-힣a-z0-9_-]&#123;3,20&#125;$"</span>) <span class="comment">// 정규표현식으로 사용 가능한 패턴 지정</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span> <span class="comment">// email 형식의 문자열</span></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">8</span>, max = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Data</code> : 롬복이 제공하는 어노테이션, <code>@getter</code>, <code>@setter</code>, <code>@RequiredArgsConstructor</code>, <code>@equalsAndHashcord</code>, <code>@ToString</code>을 한번에 설정해 주는 간축형 어노테이션</li></ul></li><li><strong>유효성 검사 어노테이션</strong><ul><li><code>@NotBlank</code> : 문자열이나 배열의 경우 null이 아니고 길이가 0이 아닌지 검사</li><li><code>@NotNull</code> : 변수 값이 null인지 아닌지 검사</li><li><code>@Pattern(regexp = )</code> : 변수 값이 정규표현식을 만족하는지 검사</li><li><code>@Email</code> : 이메일 형식을 만족하는지 검사</li><li><code>@Size(min=, max=)</code> : 문자열, 배열 등의 크기가 지정된 크기를 만족하는지 검사</li><li><code>@Length(min=, max=)</code> : 문자열의 길이가 지정된 크기를 만족하는지 검사(Hibernate 제공)</li><li><code>@Past</code> : 해당 시간이 과거의 시간인지 검사</li><li><code>@Future</code> : 해당 시간이 미래의 시간인지 검사</li><li><code>@AssertTrue</code> : 변수 값이 true인지 검사</li><li><code>@AssertFalse</code> : 변수 값이 flase인지 검사</li></ul></li></ul><hr><h4 id="커스텀-검증-Validator-인터페이스-구현"><a href="#커스텀-검증-Validator-인터페이스-구현" class="headerlink" title="커스텀 검증 - Validator 인터페이스 구현"></a>커스텀 검증 - Validator 인터페이스 구현</h4><ul><li><p>Spring은 도메인 객체를 검증할 수 있도록 Validator 인터페이스를 도입했다. Validator 인터페이스는 객체를 검증하는데 실패하면 Errors 객체에 에러를 등록함으로써 동작한다.</p></li><li><p>이메일, 닉네임 중복 확인을 위해 <code>Validator</code>인터페이스를 구현한다.</p></li><li><p><code>SignUpFormValidator.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Errors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span> <span class="comment">// lombok이 제공하는 어노테이션, private final 타입의 맴버 변수의 생성자를 만들어준다.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUpFormValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AccountRepository accountRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// SignUpForm 타입의 인스턴스를 검사</span></span><br><span class="line">        <span class="keyword">return</span> clazz.isAssignableFrom(SignUpForm<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object target, Errors errors)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 이메일, 닉네임 중복 검사</span></span><br><span class="line">        SignUpForm signUpForm = (SignUpForm)target;</span><br><span class="line">        <span class="keyword">if</span> (accountRepository.existsByEmail(signUpForm.getEmail()))&#123;</span><br><span class="line">            errors.rejectValue(<span class="string">"email"</span>, <span class="string">"invalid.email"</span>, <span class="keyword">new</span> Object[]&#123;signUpForm.getEmail()&#125;, <span class="string">"이미 사용중인 이메일입니다."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (accountRepository.existsByNickname(signUpForm.getNickname()))&#123;</span><br><span class="line">            errors.rejectValue(<span class="string">"nickname"</span>, <span class="string">"invalid.nickname"</span>, <span class="keyword">new</span> Object[]&#123;signUpForm.getNickname()&#125;, <span class="string">"이미 사용중인 닉네임입니다."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Validator</code> 인터페이스는 두 가지 메서드를 가지고 있다.</p><ul><li><code>supports(Class)</code> : 매개변수로 전달된 클래스를 검증할 수 있는지 여부를 반환</li><li><code>validate(Object, Errors)</code> : 매개변수로 전달된 객체를 검증하고 실패하면 Errors객체에 에러를 등록<ul><li><code>org.springframework.validation.Errors</code>임을 주의</li></ul></li></ul></li><li><p><code>@RequiredArgsConstructor</code> : lombok이 제공하는 어노테이션, private final 타입의 맴버 변수의 생성자를 만들어준다.</p><ul><li>다음과 같은 의미<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SignUpFormValidator</span><span class="params">(AccountRepository accountRepository)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.accountRepository = accountRepository;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>(스프링 4.2 이후 어떤 빈이 생성자가 하나이고 그 생성자가 받는 파라미터들이 빈으로 등록이 되어있다면 자동으로 빈을 주입해주기 때문에 @Autowired @Inject 없이도 의존성 주입이 됨.)</p></li></ul><ul><li><code>AccountRepository.java</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">existsByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">existsByNickname</span><span class="params">(String nickname)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>@Transactional(readOnly = true)</code> : 트랜잭션을 읽기 전용으로 설정 (해당 nickname, mail의 존재 여부만 확인)</li></ul><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-JPA-%EC%9B%B9%EC%95%B1/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-JPA-%EC%9B%B9%EC%95%B1/dashboard</a><br><a href="https://webcoding.tistory.com/entry/Spring-JSR-303-%EC%9C%BC%EB%A1%9C-%EA%B0%9D%EC%B2%B4-%EA%B0%92-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0" target="_blank" rel="external nofollow noopener noreferrer">https://webcoding.tistory.com/entry/Spring-JSR-303-%EC%9C%BC%EB%A1%9C-%EA%B0%9D%EC%B2%B4-%EA%B0%92-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0</a><br><a href="https://velog.io/@junwoo4690/Spring-boot-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%97%90%EC%84%9C-request-Validation-%EC%9A%94%EC%B2%AD%EA%B0%92-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0" target="_blank" rel="external nofollow noopener noreferrer">https://velog.io/@junwoo4690/Spring-boot-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%97%90%EC%84%9C-request-Validation-%EC%9A%94%EC%B2%AD%EA%B0%92-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0</a><br><a href="https://velog.io/@junwoo4690/Spring-boot-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%97%90%EC%84%9C-request-Validation-%EC%9A%94%EC%B2%AD%EA%B0%92-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0" target="_blank" rel="external nofollow noopener noreferrer">https://velog.io/@junwoo4690/Spring-boot-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%97%90%EC%84%9C-request-Validation-%EC%9A%94%EC%B2%AD%EA%B0%92-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0</a><br><a href="https://www.egovframe.go.kr/wiki/doku.php?id=egovframework:rte2:ptl:jsr303" target="_blank" rel="external nofollow noopener noreferrer">https://www.egovframe.go.kr/wiki/doku.php?id=egovframework:rte2:ptl:jsr303</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;유효성-검사&quot;&gt;&lt;a href=&quot;#유효성-검사&quot; class=&quot;headerlink&quot; title=&quot;유효성 검사&quot;&gt;&lt;/a&gt;유효성 검사&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;폼 데이터가 적합한지 체크하는 기능은 스프링이 제공해주는 Validator 인터페이스를
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 괄호 변환</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/20/programmers_60058/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/20/programmers_60058/</id>
    <published>2020-04-20T11:51:12.000Z</published>
    <updated>2020-04-21T05:41:47.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-괄호-변환"><a href="#프로그래머스-괄호-변환" class="headerlink" title="프로그래머스 - 괄호 변환"></a>프로그래머스 - 괄호 변환</h1><h2 id="괄호-변환"><a href="#괄호-변환" class="headerlink" title="괄호 변환"></a>괄호 변환</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>카카오에 신입 개발자로 입사한 콘은 선배 개발자로부터 개발역량 강화를 위해 다른 개발자가 작성한 소스 코드를 분석하여 문제점을 발견하고 수정하라는 업무 과제를 받았습니다. 소스를 컴파일하여 로그를 보니 대부분 소스 코드 내 작성된 괄호가 개수는 맞지만 짝이 맞지 않은 형태로 작성되어 오류가 나는 것을 알게 되었습니다.<br>수정해야 할 소스 파일이 너무 많아서 고민하던 콘은 소스 코드에 작성된 모든 괄호를 뽑아서 올바른 순서대로 배치된 괄호 문자열을 알려주는 프로그램을 다음과 같이 개발하려고 합니다.</p><h3 id="용어의-정의"><a href="#용어의-정의" class="headerlink" title="용어의 정의"></a>용어의 정의</h3><p>‘(‘ 와 ‘)’ 로만 이루어진 문자열이 있을 경우, ‘(‘ 의 개수와 ‘)’ 의 개수가 같다면 이를 균형잡힌 괄호 문자열이라고 부릅니다.<br>그리고 여기에 ‘(‘와 ‘)’의 괄호의 짝도 모두 맞을 경우에는 이를 올바른 괄호 문자열이라고 부릅니다.<br>예를 들어, “(()))(“와 같은 문자열은 균형잡힌 괄호 문자열 이지만 올바른 괄호 문자열은 아닙니다.<br>반면에 “(())()”와 같은 문자열은 균형잡힌 괄호 문자열 이면서 동시에 올바른 괄호 문자열 입니다.</p><p>‘(‘ 와 ‘)’ 로만 이루어진 문자열 w가 균형잡힌 괄호 문자열 이라면 다음과 같은 과정을 통해 올바른 괄호 문자열로 변환할 수 있습니다.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다.</span><br><span class="line"><span class="number">2.</span> 문자열 w를 두 <span class="string">"균형잡힌 괄호 문자열"</span> u, v로 분리합니다. 단, u는 <span class="string">"균형잡힌 괄호 문자열"</span>로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다.</span><br><span class="line"><span class="number">3.</span> 문자열 u가 <span class="string">"올바른 괄호 문자열"</span> 이라면 문자열 v에 대해 <span class="number">1</span>단계부터 다시 수행합니다.</span><br><span class="line">  <span class="number">3</span><span class="number">-1.</span> 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다.</span><br><span class="line"><span class="number">4.</span> 문자열 u가 <span class="string">"올바른 괄호 문자열"</span>이 아니라면 아래 과정을 수행합니다.</span><br><span class="line">  <span class="number">4</span><span class="number">-1.</span> 빈 문자열에 첫 번째 문자로 '('를 붙입니다.</span><br><span class="line">  <span class="number">4</span><span class="number">-2.</span> 문자열 v에 대해 <span class="number">1</span>단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다.</span><br><span class="line">  <span class="number">4</span><span class="number">-3.</span> ')'를 다시 붙입니다.</span><br><span class="line">  <span class="number">4</span><span class="number">-4.</span> u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다.</span><br><span class="line">  <span class="number">4</span><span class="number">-5.</span> 생성된 문자열을 반환합니다.</span><br></pre></td></tr></table></figure><p>균형잡힌 괄호 문자열 p가 매개변수로 주어질 때, 주어진 알고리즘을 수행해 올바른 괄호 문자열로 변환한 결과를 return 하도록 solution 함수를 완성해 주세요.</p><h3 id="매개변수-설명"><a href="#매개변수-설명" class="headerlink" title="매개변수 설명"></a>매개변수 설명</h3><ul><li>p는 ‘(‘ 와 ‘)’ 로만 이루어진 문자열이며 길이는 2 이상 1,000 이하인 짝수입니다.</li><li>문자열 p를 이루는 ‘(‘ 와 ‘)’ 의 개수는 항상 같습니다.</li><li>만약 p가 이미 올바른 괄호 문자열이라면 그대로 return 하면 됩니다.</li></ul><h3 id="입출력-예에-대한-설명"><a href="#입출력-예에-대한-설명" class="headerlink" title="입출력 예에 대한 설명"></a>입출력 예에 대한 설명</h3><ul><li><p>입출력 예 #1</p><ul><li>이미 올바른 괄호 문자열 입니다.</li></ul></li><li><p>입출력 예 #2</p><ul><li>두 문자열 u, v로 분리합니다.<ul><li>u = “)(“</li><li>v = “”</li></ul></li><li>u가 올바른 괄호 문자열이 아니므로 다음과 같이 새로운 문자열을 만듭니다.<ul><li>v에 대해 1단계부터 재귀적으로 수행하면 빈 문자열이 반환됩니다.</li><li>u의 앞뒤 문자를 제거하고, 나머지 문자의 괄호 방향을 뒤집으면 “”이 됩니다.</li><li>따라서 생성되는 문자열은 “(“ + “” + “)” + “”이며, 최종적으로 “()”로 변환됩니다.</li></ul></li></ul></li><li><p>입출력 예 #3</p><ul><li>두 문자열 u, v로 분리합니다.<ul><li>u = “()”</li><li>v = “))((()”</li></ul></li><li>문자열 u가 올바른 괄호 문자열이므로 그대로 두고, v에 대해 재귀적으로 수행합니다.</li><li>다시 두 문자열 u, v로 분리합니다.<ul><li>u = “))((“</li><li>v = “()”</li></ul></li><li>u가 올바른 괄호 문자열이 아니므로 다음과 같이 새로운 문자열을 만듭니다.<ul><li>v에 대해 1단계부터 재귀적으로 수행하면 “()”이 반환됩니다.</li><li>u의 앞뒤 문자를 제거하고, 나머지 문자의 괄호 방향을 뒤집으면 “()”이 됩니다.</li><li>따라서 생성되는 문자열은 “(“ + “()” + “)” + “()”이며, 최종적으로 “(())()”를 반환합니다.</li></ul></li><li>처음에 그대로 둔 문자열에 반환된 문자열을 이어 붙이면 “()” + “(())()” = “()(())()”가 됩니다.</li></ul></li></ul><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/60058" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/60058</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>문제에서 시키는대로 아주 정확히 구현하면 되는 문제이다.</li><li>올바른 괄호 문자열은 check함수에서 스택을 이용하여 판별하도록 하였다.</li><li>w를 u와 v로 분리하는 과정은 왼쪽 괄호 수와 오른쪽 괄호 수를 계산하여 처음 일치하는 순간을 기준으로 문자열을 분리하였다.</li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 올바른 괄호 문자열인지 판별하는 함수</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">')'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (s.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">s.push(str[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 올바른 괄호 문자열</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">go</span><span class="params">(<span class="built_in">string</span> w)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 빈 문자열인 경우 빈 문자열 반환</span></span><br><span class="line"><span class="keyword">if</span> (w == <span class="string">""</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> u, v;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>; <span class="comment">// 왼쪽 괄호 수</span></span><br><span class="line"><span class="keyword">int</span> right = <span class="number">0</span>; <span class="comment">// 오른쪽 괄호 수</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (w[i] == <span class="string">'('</span>) left++;</span><br><span class="line"><span class="keyword">else</span> right++;</span><br><span class="line"><span class="keyword">if</span> (left == right) &#123; <span class="comment">// 균형잡힌 괄호 문자열이 된다면</span></span><br><span class="line">u = w.substr(<span class="number">0</span>, i + <span class="number">1</span>); <span class="comment">// 문자열 분리</span></span><br><span class="line">v = w.substr(i + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// u가 올바른 괄호 문자열인 경우</span></span><br><span class="line"><span class="keyword">if</span> (check(u)) <span class="keyword">return</span> u + go(v); <span class="comment">// 3-1</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">string</span> str = <span class="string">"("</span> + go(v) + <span class="string">")"</span>; <span class="comment">// 4-1 ~ 4-3</span></span><br><span class="line"><span class="built_in">string</span> tmp = u.substr(<span class="number">1</span>, u.<span class="built_in">size</span>() - <span class="number">2</span>); <span class="comment">// 4-4 : 맨 앞, 맨 뒤 제거</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 나머지 괄호 뒤집어 붙이기</span></span><br><span class="line"><span class="keyword">if</span> (tmp[i] == <span class="string">'('</span>) str += <span class="string">")"</span>;</span><br><span class="line"><span class="keyword">else</span> str += <span class="string">"("</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">solution</span><span class="params">(<span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> answer = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">answer = go(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-괄호-변환&quot;&gt;&lt;a href=&quot;#프로그래머스-괄호-변환&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 괄호 변환&quot;&gt;&lt;/a&gt;프로그래머스 - 괄호 변환&lt;/h1&gt;&lt;h2 id=&quot;괄호-변환&quot;&gt;&lt;a href=&quot;#괄호-변
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 전화번호 목록</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/20/programmers_42577/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/20/programmers_42577/</id>
    <published>2020-04-20T06:51:12.000Z</published>
    <updated>2020-04-21T05:43:06.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-전화번호-목록"><a href="#프로그래머스-전화번호-목록" class="headerlink" title="프로그래머스 - 전화번호 목록"></a>프로그래머스 - 전화번호 목록</h1><h2 id="전화번호-목록"><a href="#전화번호-목록" class="headerlink" title="전화번호 목록"></a>전화번호 목록</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다.<br>전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.</p><p>구조대 : 119<br>박준영 : 97 674 223<br>지영석 : 11 9552 4421<br>전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h3><p>phone_book의 길이는 1 이상 1,000,000 이하입니다.<br>각 전화번호의 길이는 1 이상 20 이하입니다.</p><h3 id="입출력-예제"><a href="#입출력-예제" class="headerlink" title="입출력 예제"></a>입출력 예제</h3><p>phone_book    return<br>[119, 97674223, 1195524421]    false<br>[123,456,789]    true<br>[12,123,1235,567,88]    false</p><h3 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h3><ul><li><p>입출력 예 #1</p><ul><li>앞에서 설명한 예와 같습니다.</li></ul></li><li><p>입출력 예 #2</p><ul><li>한 번호가 다른 번호의 접두사인 경우가 없으므로, 답은 true입니다.</li></ul></li><li><p>입출력 예 #3</p><ul><li>첫 번째 전화번호, “12”가 두 번째 전화번호 “123”의 접두사입니다. 따라서 답은 false입니다.</li></ul></li></ul><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42577" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/42577</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>문자열을 오름차순 정렬한다.<ul><li>1번 예제를 오름차순 정렬하면 다음과 같다.<ul><li>ex1) 119, 1195524421, 97674223</li></ul></li></ul></li><li>다른 번호의 접두사가 되는 번호가 있다면 반드시 접두가가 되는 번호 뒤에 접두사로 가지는 번호가 오게 된다.</li><li>접두사가 되는 경우가 하나라도 있는지 유무만 판별하는 문제이므로<ul><li>정렬된 상태에서 바로 다음 문자열이 현재 문자열로 시작하는 경우가 있는지 판별한다.</li></ul></li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; phone_book)</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> answer = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 문자열 정렬</span></span><br><span class="line">sort(phone_book.<span class="built_in">begin</span>(), phone_book.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; phone_book.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 정렬된 상태이므로 바로 다음 문자열이 현재 문자열로 시작하는지 확인</span></span><br><span class="line"><span class="keyword">if</span> (phone_book[i].<span class="built_in">size</span>() &lt;= phone_book[i + <span class="number">1</span>].<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (phone_book[i] == phone_book[i + <span class="number">1</span>].substr(<span class="number">0</span>, phone_book[i].<span class="built_in">size</span>())) &#123;</span><br><span class="line">answer = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-전화번호-목록&quot;&gt;&lt;a href=&quot;#프로그래머스-전화번호-목록&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 전화번호 목록&quot;&gt;&lt;/a&gt;프로그래머스 - 전화번호 목록&lt;/h1&gt;&lt;h2 id=&quot;전화번호-목록&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 완주하지 못한 선수</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/20/programmers_42576/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/20/programmers_42576/</id>
    <published>2020-04-19T15:51:12.000Z</published>
    <updated>2020-04-21T05:42:09.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-완주하지-못한-선수"><a href="#프로그래머스-완주하지-못한-선수" class="headerlink" title="프로그래머스 - 완주하지 못한 선수"></a>프로그래머스 - 완주하지 못한 선수</h1><h2 id="완주하지-못한-선수"><a href="#완주하지-못한-선수" class="headerlink" title="완주하지 못한 선수"></a>완주하지 못한 선수</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.</p><p>마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul><li>마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.</li><li>completion의 길이는 participant의 길이보다 1 작습니다.</li><li>참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.</li><li>참가자 중에는 동명이인이 있을 수 있습니다.</li></ul><h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3><p>participant    completion    return<br>[leo, kiki, eden]    [eden, kiki]    leo<br>[marina, josipa, nikola, vinko, filipa]    [josipa, filipa, marina, nikola]    vinko<br>[mislav, stanko, mislav, ana]    [stanko, ana, mislav]    mislav</p><h3 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h3><ul><li><p>예제 #1</p><ul><li>leo는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.</li></ul></li><li><p>예제 #2</p><ul><li>vinko는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.</li></ul></li><li><p>예제 #3</p><ul><li>mislav는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.</li></ul></li></ul><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42576" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/42576</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>멀티 셋을 이용하여 완주한 사람의 집합과 참가자의 집합의 차집합을 구한다.</li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; participant, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; completion)</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> answer = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 멀티셋에 저장</span></span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="built_in">string</span>&gt; ps;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="built_in">string</span>&gt; cs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; participant.<span class="built_in">size</span>(); i++)</span><br><span class="line">ps.insert(participant[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; completion.<span class="built_in">size</span>(); i++)</span><br><span class="line">cs.insert(completion[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 차집합을 구한다.</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans(<span class="number">1</span>);</span><br><span class="line">set_difference(ps.<span class="built_in">begin</span>(), ps.<span class="built_in">end</span>(), cs.<span class="built_in">begin</span>(), cs.<span class="built_in">end</span>(), ans.<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line">answer = ans[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-완주하지-못한-선수&quot;&gt;&lt;a href=&quot;#프로그래머스-완주하지-못한-선수&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 완주하지 못한 선수&quot;&gt;&lt;/a&gt;프로그래머스 - 완주하지 못한 선수&lt;/h1&gt;&lt;h2 id=&quot;완
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 카펫</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/19/programmers_42842/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/19/programmers_42842/</id>
    <published>2020-04-19T07:11:12.000Z</published>
    <updated>2020-04-19T07:22:25.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-카펫"><a href="#프로그래머스-카펫" class="headerlink" title="프로그래머스 - 카펫"></a>프로그래머스 - 카펫</h1><h2 id="카펫"><a href="#카펫" class="headerlink" title="카펫"></a>카펫</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 빨간색으로 칠해져 있고 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.</p><p>image.png</p><p>Leo는 집으로 돌아와서 아까 본 카펫의 빨간색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.</p><p>Leo가 본 카펫에서 갈색 격자의 수 brown, 빨간색 격자의 수 red가 매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul><li>갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.</li><li>빨간색 격자의 수 red는 1 이상 2,000,000 이하인 자연수입니다.</li><li>카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.<h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3>brown    red    return<br>10    2    [4, 3]<br>8    1    [3, 3]<br>24    24    [8, 6]</li></ul><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42842" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/42842</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>빨간 격자로 만들 수 있는 카펫의 크기를 (가로 * 세로) 라고 한다면 전체 카펫의 크기는 (가로 + 2) * (세로 + 2) 이다.<ul><li>즉, 갈색 격자의 개수는 (가로 + 2) * (세로 + 2) - (가로 * 세로) 이다.</li></ul></li><li>빨간 카펫의 가능한 가로, 세로 상을 벡터에 저장하고, 위의 규칙에 따라 모든 경우를 확인하며 각 경우의 갈색 격자의 수를 구한다.</li><li>주어진 brown과 이번 경우의 갈색 격자의 수가 일치하다면 답을 구한것이므로 answer벡터에 추가하고 종료한다.</li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; solution(<span class="keyword">int</span> brown, <span class="keyword">int</span> red) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; answer;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line"><span class="comment">// 빨간 카펫의 가능한 가로, 세로 상을 v에 저장</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= red; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (red % i == <span class="number">0</span>) v.push_back(make_pair(red / i, i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="comment">// 갈색격자의 개수를 cur에 저장</span></span><br><span class="line"><span class="keyword">int</span> cur = (v[i].first + <span class="number">2</span>) * (v[i].second + <span class="number">2</span>) - red;</span><br><span class="line"><span class="comment">// 일치하는 경우 결과 저장</span></span><br><span class="line"><span class="keyword">if</span> (brown == cur) &#123;</span><br><span class="line">answer.push_back(v[i].first + <span class="number">2</span>);</span><br><span class="line">answer.push_back(v[i].second + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-카펫&quot;&gt;&lt;a href=&quot;#프로그래머스-카펫&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 카펫&quot;&gt;&lt;/a&gt;프로그래머스 - 카펫&lt;/h1&gt;&lt;h2 id=&quot;카펫&quot;&gt;&lt;a href=&quot;#카펫&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 숫자 야구</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/19/programmers_42841/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/19/programmers_42841/</id>
    <published>2020-04-19T06:11:12.000Z</published>
    <updated>2020-04-19T07:10:48.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-숫자-야구"><a href="#프로그래머스-숫자-야구" class="headerlink" title="프로그래머스 - 숫자 야구"></a>프로그래머스 - 숫자 야구</h1><h2 id="숫자-야구"><a href="#숫자-야구" class="headerlink" title="숫자 야구"></a>숫자 야구</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>숫자 야구 게임이란 2명이 서로가 생각한 숫자를 맞추는 게임입니다.</p><p>각자 서로 다른 1~9까지 3자리 임의의 숫자를 정한 뒤 서로에게 3자리의 숫자를 불러서 결과를 확인합니다. 그리고 그 결과를 토대로 상대가 정한 숫자를 예상한 뒤 맞힙니다.</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>숫자는 맞지만, 위치가 틀렸을 때는 볼</span><br><span class="line"><span class="bullet">* </span>숫자와 위치가 모두 맞을 때는 스트라이크</span><br><span class="line"><span class="bullet">* </span>숫자와 위치가 모두 틀렸을 때는 아웃</span><br></pre></td></tr></table></figure><p>예를 들어, 아래의 경우가 있으면</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">A :</span> <span class="number">123</span></span><br><span class="line"><span class="attr">B :</span> <span class="number">1</span><span class="string">스트라이크</span> <span class="number">1</span><span class="string">볼.</span></span><br><span class="line"><span class="attr">A :</span> <span class="number">356</span></span><br><span class="line"><span class="attr">B :</span> <span class="number">1</span><span class="string">스트라이크</span> <span class="number">0</span><span class="string">볼.</span></span><br><span class="line"><span class="attr">A :</span> <span class="number">327</span></span><br><span class="line"><span class="attr">B :</span> <span class="number">2</span><span class="string">스트라이크</span> <span class="number">0</span><span class="string">볼.</span></span><br><span class="line"><span class="attr">A :</span> <span class="number">489</span></span><br><span class="line"><span class="attr">B :</span> <span class="number">0</span><span class="string">스트라이크</span> <span class="number">1</span><span class="string">볼.</span></span><br></pre></td></tr></table></figure><p>이때 가능한 답은 324와 328 두 가지입니다.</p><p>질문한 세 자리의 수, 스트라이크의 수, 볼의 수를 담은 2차원 배열 baseball이 매개변수로 주어질 때, 가능한 답의 개수를 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul><li>질문의 수는 1 이상 100 이하의 자연수입니다.</li><li>baseball의 각 행은 [세 자리의 수, 스트라이크의 수, 볼의 수] 를 담고 있습니다.<h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3>baseball    return<br>[[123, 1, 1], [356, 1, 0], [327, 2, 0], [489, 0, 1]]    2<h3 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h3>문제에 나온 예와 같습니다.</li></ul><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42841" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/42841</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>1~9의 숫자를 중복 없이 사용하므로 가능한 경우는 최소 123 ~ 최대 987 이다.</li><li>123~987을 모두 확인하며 현재 숫자가 주어진 조건을 모두 만족한다면 answer를 1증가시키고 아니라면 넘어간다.<ul><li>먼저, 중복되는 숫자는 없으므로 같은 숫자가 있는 경우와 0이 들어가는 경우는 넘어간다.</li><li>숫자를 모두 문자열로 변환하여 비교를 하며 현재 숫자가 이번 경우의 스트라이크와 볼의 수를 만족한다면 계속 확인하고 하나라도 만족하지 않는다면 다음 숫자로 넘어간다.</li><li>모든 조건을 만족하면 answer를 1증가시킨다.</li></ul></li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; baseball)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1~9의 숫자이므로 가능한 모든 범위는 123 ~ 987</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">123</span>; i &lt;= <span class="number">987</span>; i++) &#123;</span><br><span class="line"><span class="built_in">string</span> cur = to_string(i);</span><br><span class="line"><span class="comment">// 모두 서로 다른 숫자이므로 같은 숫자가 있는 경우는 확인 안함</span></span><br><span class="line"><span class="keyword">if</span> (cur[<span class="number">0</span>] == cur[<span class="number">1</span>] || cur[<span class="number">1</span>] == cur[<span class="number">2</span>] || cur[<span class="number">0</span>] == cur[<span class="number">2</span>]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">// 0이 있는 경우는 불가능</span></span><br><span class="line"><span class="keyword">if</span> (cur[<span class="number">0</span>] == <span class="string">'0'</span> || cur[<span class="number">1</span>] == <span class="string">'0'</span> || cur[<span class="number">2</span>] == <span class="string">'0'</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 조건을 만족하는지 확인할 변수</span></span><br><span class="line"><span class="keyword">bool</span> check = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; baseball.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line"><span class="built_in">string</span> num = to_string(baseball[j][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>; <span class="comment">// 스트라이크</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>; <span class="comment">// 볼</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; k++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">3</span>; l++) &#123;</span><br><span class="line"><span class="comment">// 스트라이크인 경우</span></span><br><span class="line"><span class="keyword">if</span> (k == l &amp;&amp; num[k] == cur[l]) s++;</span><br><span class="line"><span class="comment">// 볼인 경우</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num[k] == cur[l]) b++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 현재 조건을 만족하는지 확인</span></span><br><span class="line"><span class="keyword">if</span> (s != baseball[j][<span class="number">1</span>] || b != baseball[j][<span class="number">2</span>]) &#123;</span><br><span class="line">check = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (check) answer++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-숫자-야구&quot;&gt;&lt;a href=&quot;#프로그래머스-숫자-야구&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 숫자 야구&quot;&gt;&lt;/a&gt;프로그래머스 - 숫자 야구&lt;/h1&gt;&lt;h2 id=&quot;숫자-야구&quot;&gt;&lt;a href=&quot;#숫자-야
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 여행경로</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/18/programmers_43164/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/18/programmers_43164/</id>
    <published>2020-04-17T15:11:12.000Z</published>
    <updated>2020-04-17T16:19:17.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-여행경로"><a href="#프로그래머스-여행경로" class="headerlink" title="프로그래머스 - 여행경로"></a>프로그래머스 - 여행경로</h1><h2 id="여행경로"><a href="#여행경로" class="headerlink" title="여행경로"></a>여행경로</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>주어진 항공권을 모두 이용하여 여행경로를 짜려고 합니다. 항상 ICN 공항에서 출발합니다.</p><p>항공권 정보가 담긴 2차원 배열 tickets가 매개변수로 주어질 때, 방문하는 공항 경로를 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul><li>모든 공항은 알파벳 대문자 3글자로 이루어집니다.</li><li>주어진 공항 수는 3개 이상 10,000개 이하입니다.</li><li>tickets의 각 행 [a, b]는 a 공항에서 b 공항으로 가는 항공권이 있다는 의미입니다.</li><li>주어진 항공권은 모두 사용해야 합니다.</li><li>만일 가능한 경로가 2개 이상일 경우 알파벳 순서가 앞서는 경로를 return 합니다.</li><li>모든 도시를 방문할 수 없는 경우는 주어지지 않습니다.</li></ul><h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3><p>tickets    return<br>[[ICN, JFK], [HND, IAD], [JFK, HND]]    [ICN, JFK, HND, IAD]<br>[[ICN, SFO], [ICN, ATL], [SFO, ATL], [ATL, ICN], [ATL,SFO]]    [ICN, ATL, ICN, SFO, ATL, SFO]</p><h3 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h3><ul><li>예제 #1<ul><li>[ICN, JFK, HND, IAD] 순으로 방문할 수 있습니다.</li></ul></li><li>예제 #2<ul><li>[ICN, SFO, ATL, ICN, ATL, SFO] 순으로 방문할 수도 있지만 [ICN, ATL, ICN, SFO, ATL, SFO] 가 알파벳 순으로 앞섭니다.</li></ul></li></ul><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/43164" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/43164</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>dfs를 사용하여 tickets배열을 매번 모두 탐색하며 다음 출발지가 현재 위치와 일치하는 아직 사용하지 않은 티켓이 있는지 확인한다.<ul><li>조건을 만족하는 티켓이 있다면 티켓을 사용처리(visit[i] = true) 하고 재귀를 수행한다.</li></ul></li><li>모든 티켓을 사용한 경우 재귀를 종료한다.</li><li>시작 지점은 항상 “ICN”이다.</li><li>방문 순서는 알파벳 순으로 앞서는 경우를 출력해야 하므로 dfs수행 전에 tickets벡터를 먼저 정렬한다.</li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">bool</span> visit[MAX + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="built_in">string</span> node, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;&amp; tickets, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; answer, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">answer.push_back(node);</span><br><span class="line"><span class="keyword">if</span> (index == tickets.<span class="built_in">size</span>()) &#123; <span class="comment">// 모든 티켓을 사용한 경우</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tickets.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="built_in">string</span> next = tickets[i][<span class="number">1</span>];</span><br><span class="line"><span class="built_in">string</span> now = tickets[i][<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 다음 출발지가 현재 위치와 일치하는 아직 사용하지 않은 티켓이 있는지 확인</span></span><br><span class="line"><span class="keyword">if</span> (now == node &amp;&amp; visit[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">visit[i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (dfs(next, tickets, answer, index + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">visit[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">answer.pop_back();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; solution(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; tickets) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; answer;</span><br><span class="line">sort(tickets.<span class="built_in">begin</span>(), tickets.<span class="built_in">end</span>());</span><br><span class="line">dfs(<span class="string">"ICN"</span>, tickets, answer, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-여행경로&quot;&gt;&lt;a href=&quot;#프로그래머스-여행경로&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 여행경로&quot;&gt;&lt;/a&gt;프로그래머스 - 여행경로&lt;/h1&gt;&lt;h2 id=&quot;여행경로&quot;&gt;&lt;a href=&quot;#여행경로&quot; cla
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 체육복</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/17/programmers_42862/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/17/programmers_42862/</id>
    <published>2020-04-17T04:21:12.000Z</published>
    <updated>2020-04-17T04:33:23.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-체육복"><a href="#프로그래머스-체육복" class="headerlink" title="프로그래머스 - 체육복"></a>프로그래머스 - 체육복</h1><h2 id="체육복"><a href="#체육복" class="headerlink" title="체육복"></a>체육복</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다. 학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다. 예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다. 체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.</p><p>전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul><li>전체 학생의 수는 2명 이상 30명 이하입니다.</li><li>체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.</li><li>여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.</li><li>여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다.</li><li>여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.</li></ul><h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3><p>n    lost    reserve    return<br>5    [2, 4]    [1, 3, 5]    5<br>5    [2, 4]    [3]    4<br>3    [3]    [1]    2</p><h3 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h3><ul><li><p>예제 #1</p><ul><li>1번 학생이 2번 학생에게 체육복을 빌려주고, 3번 학생이나 5번 학생이 4번 학생에게 체육복을 빌려주면 학생 5명이 체육수업을 들을 수 있습니다.</li></ul></li><li><p>예제 #2</p><ul><li>3번 학생이 2번 학생이나 4번 학생에게 체육복을 빌려주면 학생 4명이 체육수업을 들을 수 있습니다.</li></ul></li></ul><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42862" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/42862</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>전체 학생의 상태를 담는 벡터 v를 생성, 0으로 초기화, 인덱스는 학생의 번호<ul><li>여벌이 없고 잃어버리지도 않은 학생은 0</li><li>체육복을 잃어버린 학생은 -1</li><li>여벌 체육복이 있는 학생은 1, 단, 여벌 체육복을 가져왔는데 잃어버렸다면 0</li></ul></li><li>위와 같이 학생의 상태를 결정하고 v를 확인하며<ul><li>여벌이 있는 학생이라면 앞 학생이 잃어버린 학생인지 확인하고 잃어버렸다면 빌려준다.</li><li>앞 학생이 체육복이 있다면 뒷 학생이 잃어버렸는지 확인하고 잃어버렸다면 빌려준다.</li></ul></li><li>빌려준 뒤 없는 학생의 수만 전체 학생의 수에서 뺀다.</li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lost, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; reserve)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 전체 학생의 상태를 담는 벡터</span></span><br><span class="line"><span class="comment">// 여벌이 없고 잃어버리지도 않은 학생은 0</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 체육복을 잃어버린 학생은 -1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lost.<span class="built_in">size</span>(); i++)</span><br><span class="line">v[lost[i]] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 여벌 체육복이 있는 학생은 1, 단, 여벌 체육복을 가져왔는데 잃어버렸다면 0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; reserve.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[reserve[i]] == <span class="number">-1</span>) &#123;</span><br><span class="line">v[reserve[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">v[reserve[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i] == <span class="number">1</span>) &#123; <span class="comment">// 여벌이 있는 학생인 경우</span></span><br><span class="line"><span class="keyword">if</span> (i &gt;= <span class="number">2</span> &amp;&amp; v[i - <span class="number">1</span>] == <span class="number">-1</span>) &#123; <span class="comment">// 앞 학생이 없다면 빌려준다.</span></span><br><span class="line">v[i] = <span class="number">0</span>;</span><br><span class="line">v[i - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i + <span class="number">1</span> &lt;= <span class="number">30</span> &amp;&amp; v[i + <span class="number">1</span>] == <span class="number">-1</span>) &#123; <span class="comment">// 앞 학생이 있고 뒷 학생이 없다면 빌려준다.</span></span><br><span class="line">v[i] = <span class="number">0</span>;</span><br><span class="line">v[i + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">answer = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i] == <span class="number">-1</span>) answer--; <span class="comment">// 빌려준 뒤 없는 학생의 수만 전체 학생의 수에서 뺀다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-체육복&quot;&gt;&lt;a href=&quot;#프로그래머스-체육복&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 체육복&quot;&gt;&lt;/a&gt;프로그래머스 - 체육복&lt;/h1&gt;&lt;h2 id=&quot;체육복&quot;&gt;&lt;a href=&quot;#체육복&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 소수 찾기</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/17/programmers_42839/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/17/programmers_42839/</id>
    <published>2020-04-17T03:51:12.000Z</published>
    <updated>2020-04-17T04:05:42.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-소수-찾기"><a href="#프로그래머스-소수-찾기" class="headerlink" title="프로그래머스 - 소수 찾기"></a>프로그래머스 - 소수 찾기</h1><h2 id="소수-찾기"><a href="#소수-찾기" class="headerlink" title="소수 찾기"></a>소수 찾기</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.</p><p>각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.</p><h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul><li><p>numbers는 길이 1 이상 7 이하인 문자열입니다.</p></li><li><p>numbers는 0~9까지 숫자만으로 이루어져 있습니다.</p></li><li><p>013은 0, 1, 3 숫자가 적힌 종이 조각이 흩어져있다는 의미입니다.</p><h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3><p>numbers    return<br>17    3<br>011    2</p><h3 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h3></li><li><p>예제 #1</p><ul><li>[1, 7]으로는 소수 [7, 17, 71]를 만들 수 있습니다.</li></ul></li><li><p>예제 #2</p><ul><li>[0, 1, 1]으로는 소수 [11, 101]를 만들 수 있습니다.</li></ul></li></ul><p>11과 011은 같은 숫자로 취급합니다.</p><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42839" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/42839</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>에라토스테네스의 체를 이용하여 소수를 구하고 재귀로 순열을 구현하여 해결하였다.</li><li>numbers문자열에 각 수를 하나씩 추가해보며 재귀를 수행하고 현재 문자열이 빈 문자열이 아니고 중복되지 않은 경우 카운트한다.<ul><li>이때, 이미 사용한 인덱스의 수를 사용하지 않도록 check배열에 기록한다.</li></ul></li><li>또한 같은 수가 두 번 카운트되면 안되므로 visit배열을 사용하여 한 번 확인한 수는 다시 확인하지 않는다.</li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">bool</span> prime[MAX];</span><br><span class="line"><span class="keyword">bool</span> visit[MAX];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> index, <span class="built_in">string</span> numbers, <span class="built_in">string</span> cur)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 현재 문자열이 빈 문자열이 아니고 중복되지 않은 경우</span></span><br><span class="line"><span class="keyword">if</span> (cur != <span class="string">""</span> &amp;&amp; !visit[stoi(cur)]) &#123;</span><br><span class="line"><span class="keyword">int</span> num = stoi(cur);</span><br><span class="line"><span class="keyword">if</span> (!visit[num]) &#123;</span><br><span class="line">visit[num] = <span class="literal">true</span>; <span class="comment">// 방문 처리</span></span><br><span class="line"><span class="keyword">if</span> (!prime[num])cnt++; <span class="comment">// 소수인 경우 카운트</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i]) <span class="keyword">continue</span>; <span class="comment">// 이미 사용한 수이면 통과</span></span><br><span class="line">check[i] = <span class="literal">true</span>;</span><br><span class="line">go(index + <span class="number">1</span>, numbers, cur + numbers[i]);</span><br><span class="line">check[i] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="built_in">string</span> numbers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line">prime[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">prime[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 에라토스테네스의 체</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt; MAX; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (prime[i] == <span class="literal">false</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; MAX; j += i) &#123;</span><br><span class="line">prime[j] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">go(<span class="number">0</span>, numbers, <span class="string">""</span>);</span><br><span class="line">answer = cnt;</span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-소수-찾기&quot;&gt;&lt;a href=&quot;#프로그래머스-소수-찾기&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 소수 찾기&quot;&gt;&lt;/a&gt;프로그래머스 - 소수 찾기&lt;/h1&gt;&lt;h2 id=&quot;소수-찾기&quot;&gt;&lt;a href=&quot;#소수-찾
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 네트워크</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/16/programmers_43237/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/16/programmers_43237/</id>
    <published>2020-04-15T15:51:12.000Z</published>
    <updated>2020-04-15T16:06:48.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-네트워크"><a href="#프로그래머스-네트워크" class="headerlink" title="프로그래머스 - 네트워크"></a>프로그래머스 - 네트워크</h1><h2 id="네트워크"><a href="#네트워크" class="headerlink" title="네트워크"></a>네트워크</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고, 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.</p><p>컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때, 네트워크의 개수를 return 하도록 solution 함수를 작성하시오.</p><h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul><li>컴퓨터의 개수 n은 1 이상 200 이하인 자연수입니다.</li><li>각 컴퓨터는 0부터 n-1인 정수로 표현합니다.</li><li>i번 컴퓨터와 j번 컴퓨터가 연결되어 있으면 computers[i][j]를 1로 표현합니다.</li><li>computer[i][i]는 항상 1입니다.</li></ul><h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3><p>n    computers    return<br>3    [[1, 1, 0], [1, 1, 0], [0, 0, 1]]    2<br>3    [[1, 1, 0], [1, 1, 1], [0, 1, 1]]    1</p><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/43162" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/43162</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>백준의 11724번 문제와 거의 똑같은 문제이다.<ul><li><a href="https://kyu9341.github.io/algorithm/2020/02/26/algorithm11724/">https://kyu9341.github.io/algorithm/2020/02/26/algorithm11724/</a></li></ul></li><li>dfs 또는 bfs를 사용하여 해결할 수 있다. 여기서는 dfs를 사용하였다.<ul><li>새로운 벡터에 네트워크의 연결 정보를 새로 담고, dfs를 통해 현재 노드에서 연결된 모든 노드를 체크한다.</li><li>체크되지 않은 노드인 경우에만 다시 dfs를 수행하여 dfs가 실행된 횟수를 구하면 그게 네트워크의 개수이다.</li></ul></li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">200</span>]; <span class="comment">// 탐색된 노드인지 판별하기 위한 배열</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a[<span class="number">200</span>]; <span class="comment">// 네트워크 연결 정보를 저장하기 위한 벡터</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">check[node] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a[node].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> next = a[node][i];</span><br><span class="line"><span class="keyword">if</span> (!check[next]) &#123;</span><br><span class="line">dfs(next, n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; computers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (computers[i][j]) &#123;</span><br><span class="line">a[i].push_back(j); <span class="comment">// 연결</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!check[i]) &#123; <span class="comment">// 아직 연결되지 않은 노드만 탐색</span></span><br><span class="line">answer++; <span class="comment">// 네트워크의 개수 카운트</span></span><br><span class="line">dfs(i, n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-네트워크&quot;&gt;&lt;a href=&quot;#프로그래머스-네트워크&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 네트워크&quot;&gt;&lt;/a&gt;프로그래머스 - 네트워크&lt;/h1&gt;&lt;h2 id=&quot;네트워크&quot;&gt;&lt;a href=&quot;#네트워크&quot; cla
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 - 스프링 시큐리티 설정 커스터마이징</title>
    <link href="https://kyu9341.github.io/java/2020/04/15/java_springBootSecurity2/"/>
    <id>https://kyu9341.github.io/java/2020/04/15/java_springBootSecurity2/</id>
    <published>2020-04-15T04:12:28.000Z</published>
    <updated>2020-04-15T04:48:03.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스프링-부트-스프링-시큐리티-설정-커스터마이징"><a href="#스프링-부트-스프링-시큐리티-설정-커스터마이징" class="headerlink" title="스프링 부트 - 스프링 시큐리티 설정 커스터마이징"></a>스프링 부트 - 스프링 시큐리티 설정 커스터마이징</h2><ul><li>웹 시큐리티 설정<ul><li><code>WebSecurityConfigurerAdapter</code>를 상속받아 시큐리티 관련 설정을 할 수 있다.</li></ul></li><li><code>UserDetailsServie</code> 구현</li><li><code>PasswordEncoder</code> 설정 및 사용</li></ul><ul><li>의존성 추가<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>스프링 시큐리티와 타임리프, H2 의존성을 추가한다.</li></ul><hr><ul><li><p><code>Application.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>HomeController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/my"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">my</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>SecurityConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/"</span>, <span class="string">"/hello"</span>).permitAll() <span class="comment">// 루트랑 hello만 인가</span></span><br><span class="line">                .anyRequest().authenticated() <span class="comment">// 나머지 모든 요청은 인증이 필요</span></span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()     <span class="comment">// form로그인을 사용할 것</span></span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic();   <span class="comment">// httpBasic authentication을 사용할 것이다.</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>WebSecurityConfigurerAdapter</code>를 상속받고 <code>configure</code>메서드를 오버라이딩하여 시큐리티 설정을 커스터마이징 할 수 있다.</p></li><li><p><code>/</code>(root) 와 <code>/hello</code>에 접근할 때를 제외하고 나머지 모든 요청에 대해 인증이 필요하고, formLogin과 httpBasic을 통한 인증을 하도록 설정했다.</p></li></ul><hr><ul><li><code>index.html</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Spring Security<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/hello"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/my"</span>&gt;</span>my<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>hello.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>my.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>위와 같이 설정하면 이전 포스팅에서와 달리 모든 요청에 대해 로그인 페이지로 이동하지 않고, <code>/my</code>로 요청을 보낸 경우에만 로그인 페이지로 이동하게 된다.</li></ul><h4 id="H2-DB를-통한-유저-정보-생성-및-인증"><a href="#H2-DB를-통한-유저-정보-생성-및-인증" class="headerlink" title="H2 DB를 통한 유저 정보 생성 및 인증"></a>H2 DB를 통한 유저 정보 생성 및 인증</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>사용자 계정에 대한 정보를 담는 Account클래스 생성</li><li>DB와 어플리케이션 간의 데이터 이동이 있을 때 그 데이터에 대한 정보를 담고 있는 객체의 클래스이다.<ul><li>DTO (Data Transfer Object) 라고 한다.</li></ul></li></ul><ul><li><code>SecurityConfig.java</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/"</span>, <span class="string">"/hello"</span>).permitAll() <span class="comment">// 루트랑 hello만 인가</span></span><br><span class="line">                .anyRequest().authenticated() <span class="comment">// 나머지 모든 요청은 인증이 필요</span></span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()     <span class="comment">// form로그인을 사용할 것</span></span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic();   <span class="comment">// httpBasic authentication을 사용할 것이다.</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123; <span class="comment">// 패스워드 인코더</span></span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>시큐리티 설정을 관리하는 클래스에 패스워드 인코더를 추가</li></ul><ul><li><p><code>AccountRunner.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Account kwon = accountService.createAccount(<span class="string">"kwon"</span>, <span class="string">"1234"</span>);</span><br><span class="line">        System.out.println(kwon.getUsername() + <span class="string">" password : "</span> + kwon.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>애플리케이션 실행 시 username이 kwon이고 password가 1234인 계정 정보를 생성하는 코드</p><ul><li>H2 데이터베이스에 저장된다.</li></ul></li><li><p><code>AccountRepository.java</code>인터페이스 생성</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Optional&lt;Account&gt; <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>JpaRepository를 상속하여 DB에 의해 관리되는 데이터를 추상화된 형태로 접근할 수 있다.</p></li><li><p>findByUsername이라는 메서드를 생성하여 nsername을 기준으로 사용자 데이터를 가져올 수 있다.</p></li></ul><ul><li><p><code>AccountService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountRepository accountRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 주어진 정보로 리포지토리에 저장</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">createAccount</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setUsername(username);</span><br><span class="line">        account.setPassword(passwordEncoder.encode(password)); <span class="comment">// 패스워드를 인코딩하여 저장</span></span><br><span class="line">        <span class="keyword">return</span> accountRepository.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 입력받은 username에 해당하는 user정보를 확인하여 검증</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        Optional&lt;Account&gt; byUsername = accountRepository.findByUsername(username);</span><br><span class="line">        <span class="comment">// 실제 데이터가 없으면 username을 찾지 못했다는 예외를 던지고 있다면 값을 받아온다.</span></span><br><span class="line">        Account account = byUsername.orElseThrow(()-&gt;<span class="keyword">new</span> UsernameNotFoundException(username));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(account.getUsername(), account.getPassword(), authorities());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;? extends GrantedAuthority&gt; authorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_USER"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>createAccount</code>메서드는 주어진 정보로 계정을 생성하여 레포지토리에 저장한다.</p><ul><li>이때, 패스워드를 인코딩하여 저장하였다.</li></ul></li><li><p><code>UserDetailsService</code>는 반드시 구현해야 한다. 이 타입의 빈이 등록이 되어 있어야 스프링 부트가 자동으로 생성하는 유저가 생성이 안된다.</p><ul><li>보통 유저 정보들을 관리하는 서비스 계층에 구현을 한다.(여기서는 AccountService)</li><li>또는 서비스와 별개로 또 다른 클래스를 만들어서 그 클래스가 <code>UserDetailsService</code>인터페이스를 구현하도록해도 한다.</li></ul></li><li><p>로그인 시에 <code>UserDetailsService</code>가 가지고 있는 <code>loadUserByUsername</code> 메서드가 호출이 되고, 입력된 username이 들어와서 입력된 패스워드를 검증한다.</p></li><li><p>즉, 사용자가 보낸 정보와 DB에 존재하는 사용자 정보가 일치하는제 확인하는 역할을 수행한다.</p></li></ul><hr><ul><li>이제 애플리케이션을 실행하여 <code>/my</code>로 요청을 보내면 나오는 로그인 화면에서 위에서 설정한 username과 password로 로그인이 가능하다.</li></ul><div style="width: 410px; height: 360px;">    <img src="https://kyu9341.github.io/img/security4.png" style="width: 410px; height: 360px;"></div><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard</a><br><a href="https://engkimbs.tistory.com/807?category=767865" target="_blank" rel="external nofollow noopener noreferrer">https://engkimbs.tistory.com/807?category=767865</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;스프링-부트-스프링-시큐리티-설정-커스터마이징&quot;&gt;&lt;a href=&quot;#스프링-부트-스프링-시큐리티-설정-커스터마이징&quot; class=&quot;headerlink&quot; title=&quot;스프링 부트 - 스프링 시큐리티 설정 커스터마이징&quot;&gt;&lt;/a&gt;스프링 부트 - 
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 타겟 넘버</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/15/programmers_43165/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/15/programmers_43165/</id>
    <published>2020-04-14T15:01:12.000Z</published>
    <updated>2020-04-14T15:44:54.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-타겟-넘버"><a href="#프로그래머스-타겟-넘버" class="headerlink" title="프로그래머스 - 타겟 넘버"></a>프로그래머스 - 타겟 넘버</h1><h2 id="타겟-넘버"><a href="#타겟-넘버" class="headerlink" title="타겟 넘버"></a>타겟 넘버</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>n개의 음이 아닌 정수가 있습니다. 이 수를 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span> = <span class="number">3</span></span><br><span class="line">+<span class="number">1</span><span class="number">-1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span> = <span class="number">3</span></span><br><span class="line">+<span class="number">1</span>+<span class="number">1</span><span class="number">-1</span>+<span class="number">1</span>+<span class="number">1</span> = <span class="number">3</span></span><br><span class="line">+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span><span class="number">-1</span>+<span class="number">1</span> = <span class="number">3</span></span><br><span class="line">+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span><span class="number">-1</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><p>주어지는 숫자의 개수는 2개 이상 20개 이하입니다.<br>각 숫자는 1 이상 50 이하인 자연수입니다.<br>타겟 넘버는 1 이상 1000 이하인 자연수입니다.</p><h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3><p>numbers    target    return<br>[1, 1, 1, 1, 1]    3    5<br>입출력 예 설명<br>문제에 나온 예와 같습니다.</p><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/43165" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/43165</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>DFS를 재귀함수로 구현하여 해결하였다.</li><li>index를 1씩 증가시키며 sum에 현재 index의 number를 더하는 경우, 빼는 경우를 구분하여 재귀를 수행한다.</li><li>index가 배열의 크기와 같아지면(주어진 수를 모두 확인) 현재까지의 합이 타겟 넘버와 일치하는지 확인한다.<ul><li>일치한다면 1을 리턴하고 아니라면 0을 리턴한다.</li></ul></li><li>반환되는 값을 모두 더하면 그것이 타겟 넘버를 만들 수 있는 모든 경우이다.</li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; numbers, <span class="keyword">int</span> target, <span class="keyword">int</span> index, <span class="keyword">int</span> sum, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index == numbers.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 타겟 넘버를 만든 경우</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 만들지 못한 경우</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count = dfs(numbers, target, index + <span class="number">1</span>, sum + numbers[index], count) + dfs(numbers, target, index + <span class="number">1</span>, sum - numbers[index], count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">answer = dfs(numbers, target, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-타겟-넘버&quot;&gt;&lt;a href=&quot;#프로그래머스-타겟-넘버&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 타겟 넘버&quot;&gt;&lt;/a&gt;프로그래머스 - 타겟 넘버&lt;/h1&gt;&lt;h2 id=&quot;타겟-넘버&quot;&gt;&lt;a href=&quot;#타겟-넘
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
</feed>

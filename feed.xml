<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kwon&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/5594e9f17b4feb6e10a6bc1e7107ab0b</icon>
  <subtitle>개발 블로그</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://kyu9341.github.io/"/>
  <updated>2020-04-15T04:42:14.116Z</updated>
  <id>https://kyu9341.github.io/</id>
  
  <author>
    <name>kwon</name>
    <email>kyu9341@naver.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>스프링 부트 - 스프링 시큐리티 설정 커스터마이징</title>
    <link href="https://kyu9341.github.io/java/2020/04/15/java_springBootSecurity2/"/>
    <id>https://kyu9341.github.io/java/2020/04/15/java_springBootSecurity2/</id>
    <published>2020-04-15T04:12:28.000Z</published>
    <updated>2020-04-15T04:42:14.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스프링-부트-스프링-시큐리티-설정-커스터마이징"><a href="#스프링-부트-스프링-시큐리티-설정-커스터마이징" class="headerlink" title="스프링 부트 - 스프링 시큐리티 설정 커스터마이징"></a>스프링 부트 - 스프링 시큐리티 설정 커스터마이징</h2><ul><li>웹 시큐리티 설정<ul><li><code>WebSecurityConfigurerAdapter</code>를 상속받아 시큐리티 관련 설정을 할 수 있다.</li></ul></li><li><code>UserDetailsServie</code> 구현</li><li><code>PasswordEncoder</code> 설정 및 사용</li></ul><ul><li>의존성 추가<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>스프링 시큐리티와 타임리프, H2 의존성을 추가한다.</li></ul><hr><ul><li><p><code>Application.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>HomeController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/my"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">my</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>SecurityConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/"</span>, <span class="string">"/hello"</span>).permitAll() <span class="comment">// 루트랑 hello만 인가</span></span><br><span class="line">                .anyRequest().authenticated() <span class="comment">// 나머지 모든 요청은 인증이 필요</span></span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()     <span class="comment">// form로그인을 사용할 것</span></span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic();   <span class="comment">// httpBasic authentication을 사용할 것이다.</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>WebSecurityConfigurerAdapter</code>를 상속받고 <code>configure</code>메서드를 오버라이딩하여 시큐리티 설정을 커스터마이징 할 수 있다.</p></li><li><p><code>/</code>(root) 와 <code>/hello</code>에 접근할 때를 제외하고 나머지 모든 요청에 대해 인증이 필요하고, formLogin과 httpBasic을 통한 인증을 하도록 설정했다.</p></li></ul><hr><ul><li><code>index.html</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Spring Security<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/hello"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/my"</span>&gt;</span>my<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>hello.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>my.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>위와 같이 설정하면 이전 포스팅에서와 달리 모든 요청에 대해 로그인 페이지로 이동하지 않고, <code>/my</code>로 요청을 보낸 경우에만 로그인 페이지로 이동하게 된다.</li></ul><h4 id="H2-DB를-통한-유저-정보-생성-및-인증"><a href="#H2-DB를-통한-유저-정보-생성-및-인증" class="headerlink" title="H2 DB를 통한 유저 정보 생성 및 인증"></a>H2 DB를 통한 유저 정보 생성 및 인증</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>사용자 계정에 대한 정보를 담는 Account클래스 생성</li><li>DB와 어플리케이션 간의 데이터 이동이 있을 때 그 데이터에 대한 정보를 담고 있는 객체의 클래스이다.<ul><li>DTO (Data Transfer Object) 라고 한다.</li></ul></li></ul><ul><li><p><code>SecurityConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/"</span>, <span class="string">"/hello"</span>).permitAll() <span class="comment">// 루트랑 hello만 인가</span></span><br><span class="line">                .anyRequest().authenticated() <span class="comment">// 나머지 모든 요청은 인증이 필요</span></span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()     <span class="comment">// form로그인을 사용할 것</span></span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic();   <span class="comment">// httpBasic authentication을 사용할 것이다.</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123; <span class="comment">// 패스워드 인코더</span></span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>시큐리티 설정을 관리하는 클래스에 패스워드 인코더를 추가</p></li><li><p>PasswordEncoder에 반환</p></li><li><p><code>AccountRunner.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Account kwon = accountService.createAccount(<span class="string">"kwon"</span>, <span class="string">"1234"</span>);</span><br><span class="line">        System.out.println(kwon.getUsername() + <span class="string">" password : "</span> + kwon.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>애플리케이션 실행 시 username이 kwon이고 password가 1234인 계정 정보를 생성하는 코드</p><ul><li>H2 데이터베이스에 저장된다.</li></ul></li><li><p><code>AccountRepository.java</code>인터페이스 생성</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Optional&lt;Account&gt; <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>JpaRepository를 상속하여 DB에 의해 관리되는 데이터를 추상화된 형태로 접근할 수 있다.</p></li><li><p>findByUsername이라는 메서드를 생성하여 nsername을 기준으로 사용자 데이터를 가져올 수 있다.</p></li></ul><ul><li><p><code>AccountService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountRepository accountRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 주어진 정보로 리포지토리에 저장</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">createAccount</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setUsername(username);</span><br><span class="line">        account.setPassword(passwordEncoder.encode(password)); <span class="comment">// 패스워드를 인코딩하여 저장</span></span><br><span class="line">        <span class="keyword">return</span> accountRepository.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 입력받은 username에 해당하는 user정보를 확인하여 검증</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        Optional&lt;Account&gt; byUsername = accountRepository.findByUsername(username);</span><br><span class="line">        <span class="comment">// 실제 데이터가 없으면 username을 찾지 못했다는 예외를 던지고 있다면 값을 받아온다.</span></span><br><span class="line">        Account account = byUsername.orElseThrow(()-&gt;<span class="keyword">new</span> UsernameNotFoundException(username));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(account.getUsername(), account.getPassword(), authorities());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;? extends GrantedAuthority&gt; authorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_USER"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>createAccount</code>메서드는 주어진 정보로 계정을 생성하여 레포지토리에 저장한다.</p><ul><li>이때, 패스워드를 인코딩하여 저장하였다.</li></ul></li><li><p><code>UserDetailsService</code>는 반드시 구현해야 한다. 이 타입의 빈이 등록이 되어 있어야 스프링 부트가 자동으로 생성하는 유저가 생성이 안된다.</p><ul><li>보통 유저 정보들을 관리하는 서비스 계층에 구현을 한다.(여기서는 AccountService)</li><li>또는 서비스와 별개로 또 다른 클래스를 만들어서 그 클래스가 <code>UserDetailsService</code>인터페이스를 구현하도록해도 한다.</li></ul></li><li><p>로그인 시에 <code>UserDetailsService</code>가 가지고 있는 <code>loadUserByUsername</code> 메서드가 호출이 되고, 입력된 username이 들어와서 입력된 패스워드를 검증한다.</p></li><li><p>즉, 사용자가 보낸 정보와 DB에 존재하는 사용자 정보가 일치하는제 확인하는 역할을 수행한다.</p></li></ul><hr><ul><li>이제 애플리케이션을 실행하여 <code>/my</code>로 요청을 보내면 나오는 로그인 화면에서 위에서 설정한 username과 password로 로그인이 가능하다.</li></ul><div style="width: 410px; height: 360px;">    <img src="https://github.com/kyu9341/TeamHash_Practice/blob/master/kwon/image/security4.png" style="width: 410px; height: 360px;"></div><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard</a><br><a href="https://engkimbs.tistory.com/807?category=767865" target="_blank" rel="external nofollow noopener noreferrer">https://engkimbs.tistory.com/807?category=767865</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;스프링-부트-스프링-시큐리티-설정-커스터마이징&quot;&gt;&lt;a href=&quot;#스프링-부트-스프링-시큐리티-설정-커스터마이징&quot; class=&quot;headerlink&quot; title=&quot;스프링 부트 - 스프링 시큐리티 설정 커스터마이징&quot;&gt;&lt;/a&gt;스프링 부트 - 
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 타겟 넘버</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/15/programmers_43165/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/15/programmers_43165/</id>
    <published>2020-04-14T15:01:12.000Z</published>
    <updated>2020-04-14T15:44:54.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-타겟-넘버"><a href="#프로그래머스-타겟-넘버" class="headerlink" title="프로그래머스 - 타겟 넘버"></a>프로그래머스 - 타겟 넘버</h1><h2 id="타겟-넘버"><a href="#타겟-넘버" class="headerlink" title="타겟 넘버"></a>타겟 넘버</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>n개의 음이 아닌 정수가 있습니다. 이 수를 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span> = <span class="number">3</span></span><br><span class="line">+<span class="number">1</span><span class="number">-1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span> = <span class="number">3</span></span><br><span class="line">+<span class="number">1</span>+<span class="number">1</span><span class="number">-1</span>+<span class="number">1</span>+<span class="number">1</span> = <span class="number">3</span></span><br><span class="line">+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span><span class="number">-1</span>+<span class="number">1</span> = <span class="number">3</span></span><br><span class="line">+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span><span class="number">-1</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><p>주어지는 숫자의 개수는 2개 이상 20개 이하입니다.<br>각 숫자는 1 이상 50 이하인 자연수입니다.<br>타겟 넘버는 1 이상 1000 이하인 자연수입니다.</p><h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3><p>numbers    target    return<br>[1, 1, 1, 1, 1]    3    5<br>입출력 예 설명<br>문제에 나온 예와 같습니다.</p><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/43165" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/43165</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>DFS를 재귀함수로 구현하여 해결하였다.</li><li>index를 1씩 증가시키며 sum에 현재 index의 number를 더하는 경우, 빼는 경우를 구분하여 재귀를 수행한다.</li><li>index가 배열의 크기와 같아지면(주어진 수를 모두 확인) 현재까지의 합이 타겟 넘버와 일치하는지 확인한다.<ul><li>일치한다면 1을 리턴하고 아니라면 0을 리턴한다.</li></ul></li><li>반환되는 값을 모두 더하면 그것이 타겟 넘버를 만들 수 있는 모든 경우이다.</li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; numbers, <span class="keyword">int</span> target, <span class="keyword">int</span> index, <span class="keyword">int</span> sum, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index == numbers.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 타겟 넘버를 만든 경우</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 만들지 못한 경우</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count = dfs(numbers, target, index + <span class="number">1</span>, sum + numbers[index], count) + dfs(numbers, target, index + <span class="number">1</span>, sum - numbers[index], count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">answer = dfs(numbers, target, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-타겟-넘버&quot;&gt;&lt;a href=&quot;#프로그래머스-타겟-넘버&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 타겟 넘버&quot;&gt;&lt;/a&gt;프로그래머스 - 타겟 넘버&lt;/h1&gt;&lt;h2 id=&quot;타겟-넘버&quot;&gt;&lt;a href=&quot;#타겟-넘
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 모의고사</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/15/programmers_42840/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/15/programmers_42840/</id>
    <published>2020-04-14T15:00:12.000Z</published>
    <updated>2020-04-14T15:25:28.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-모의고사"><a href="#프로그래머스-모의고사" class="headerlink" title="프로그래머스 - 모의고사"></a>프로그래머스 - 모의고사</h1><h2 id="모의고사"><a href="#모의고사" class="headerlink" title="모의고사"></a>모의고사</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>수포자는 수학을 포기한 사람의 준말입니다. 수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다. 수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다.</p><p>1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, …<br>2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, …<br>3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, …</p><p>1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한-조건"><a href="#제한-조건" class="headerlink" title="제한 조건"></a>제한 조건</h3><p>시험은 최대 10,000 문제로 구성되어있습니다.<br>문제의 정답은 1, 2, 3, 4, 5중 하나입니다.<br>가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요.</p><h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3><p>answers    return<br>[1,2,3,4,5]    [1]<br>[1,3,2,4,2]    [1,2,3]</p><h4 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h4><ul><li><p>입출력 예 #1</p><ul><li>수포자 1은 모든 문제를 맞혔습니다.</li><li>수포자 2는 모든 문제를 틀렸습니다.</li><li>수포자 3은 모든 문제를 틀렸습니다.</li><li>따라서 가장 문제를 많이 맞힌 사람은 수포자 1입니다.</li></ul></li><li><p>입출력 예 #2</p><ul><li>모든 사람이 2문제씩을 맞췄습니다.</li></ul></li></ul><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42840" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/42840</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>각 수포자의 패턴을 배열로 저장하여 정답을 몇 개 맞췄는지를 카운트한다.<ul><li>각 수포자의 정담 수는 정답 벡터를 모두 확인하는데, 이때 수포자의 패턴이 담긴 배열의 인덱스에 나머지 연산자(%)를 이용하여 반복적으로 접근한다.</li></ul></li><li>각 수포자의 점수와 번호를 pair형 벡터에 담고 점수를 기준으로 내림차순, 점수가 같다면 번호를 오름차순으로 하도록 정렬한다.</li><li>이후 점수가 가장 높은 수포자와 다음 수포자의 점수가 같다면 순서대로 반환할 벡터에 추가하고 아니라면 정답을 가장 많이 맞춘 사람만 추가한다.</li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> answer1[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; <span class="comment">// 1번 수포자의 패턴</span></span><br><span class="line"><span class="keyword">int</span> answer2[] = &#123; <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span> &#125;; <span class="comment">// 2번 수포자의 패턴</span></span><br><span class="line"><span class="keyword">int</span> answer3[] = &#123; <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span> &#125;; <span class="comment">// 3번 수포자의 패턴</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count1</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; answers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; answers.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (answers[i] == answer1[i % <span class="number">5</span>]) count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; answers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; answers.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (answers[i] == answer2[i % <span class="number">8</span>]) count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count3</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; answers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; answers.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (answers[i] == answer3[i % <span class="number">10</span>]) count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; u, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u.first == v.first) <span class="keyword">return</span> u.second &lt; v.second;</span><br><span class="line"><span class="keyword">return</span> u &gt; v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; solution(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; answers) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; answer;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; tmp;</span><br><span class="line"></span><br><span class="line">tmp.push_back(make_pair(count1(answers), <span class="number">1</span>));</span><br><span class="line">tmp.push_back(make_pair(count2(answers), <span class="number">2</span>));</span><br><span class="line">tmp.push_back(make_pair(count3(answers), <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 내림차순 정렬(점수를 기준), 같은 경우 번호 오름차순</span></span><br><span class="line">sort(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>(), compare);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 점수가 같은 경우 순서대로 추가</span></span><br><span class="line"><span class="keyword">if</span> (tmp[<span class="number">0</span>].first == tmp[<span class="number">1</span>].first) &#123;</span><br><span class="line">answer.push_back(tmp[<span class="number">0</span>].second);</span><br><span class="line">answer.push_back(tmp[<span class="number">1</span>].second);</span><br><span class="line"><span class="keyword">if</span> (tmp[<span class="number">1</span>].first == tmp[<span class="number">2</span>].first)</span><br><span class="line">answer.push_back(tmp[<span class="number">2</span>].second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// 점수가 다른 경우 가장 높은 사람만 추가</span></span><br><span class="line">answer.push_back(tmp[<span class="number">0</span>].second);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-모의고사&quot;&gt;&lt;a href=&quot;#프로그래머스-모의고사&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 모의고사&quot;&gt;&lt;/a&gt;프로그래머스 - 모의고사&lt;/h1&gt;&lt;h2 id=&quot;모의고사&quot;&gt;&lt;a href=&quot;#모의고사&quot; cla
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - 예산</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/14/programmers_43237/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/14/programmers_43237/</id>
    <published>2020-04-14T14:51:12.000Z</published>
    <updated>2020-04-14T15:46:36.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-예산"><a href="#프로그래머스-예산" class="headerlink" title="프로그래머스 - 예산"></a>프로그래머스 - 예산</h1><h2 id="타겟-넘버"><a href="#타겟-넘버" class="headerlink" title="타겟 넘버"></a>타겟 넘버</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>국가의 역할 중 하나는 여러 지방의 예산요청을 심사하여 국가의 예산을 분배하는 것입니다. 국가예산의 총액은 미리 정해져 있어서 모든 예산요청을 배정해 주기는 어려울 수도 있습니다. 그래서 정해진 총액 이하에서 가능한 한 최대의 총 예산을 다음과 같은 방법으로 배정합니다.</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 모든 요청이 배정될 수 있는 경우에는 요청한 금액을 그대로 배정합니다.</span><br><span class="line"><span class="number">2</span>. 모든 요청이 배정될 수 없는 경우에는 특정한 정수 상한액을 계산하여 그 이상인 예산요청에는 모두 상한액을 배정합니다.</span><br><span class="line">   상한액 이하의 예산요청에 대해서는 요청한 금액을 그대로 배정합니다.</span><br></pre></td></tr></table></figure><p>예를 들어, 전체 국가예산이 485이고 4개 지방의 예산요청이 각각 120, 110, 140, 150일 때, 상한액을 127로 잡으면 위의 요청들에 대해서 각각 120, 110, 127, 127을 배정하고 그 합이 484로 가능한 최대가 됩니다.<br>각 지방에서 요청하는 예산이 담긴 배열 budgets과 총 예산 M이 매개변수로 주어질 때, 위의 조건을 모두 만족하는 상한액을 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h3><p>지방의 수는 3 이상 100,000 이하인 자연수입니다.<br>각 지방에서 요청하는 예산은 1 이상 100,000 이하인 자연수입니다.<br>총 예산은 지방의 수 이상 1,000,000,000 이하인 자연수입니다.</p><h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3><p>budgets    M    return<br>[120, 110, 140, 150]    485    127</p><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/43237" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/43237</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>지원한 예산중 최댓값을 right로, left를 1로 하여 이분 탐색을 수행한다.</li><li>check함수에서 현재 값으로 예산을 맞출 수 있다면 true, 아니라면 false를 리턴한다.<ul><li>현재 상한액보다 예산 요청 값이 작으면 예산 요청 값을, 상한액 이상이면 상한액을 누적한다.</li><li>누적된 값이 전체 예산보다 작거나 같은지 판별한다.</li></ul></li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; budgets, <span class="keyword">int</span> M, <span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; budgets.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (mid &gt; budgets[i]) &#123;</span><br><span class="line">sum += budgets[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">sum += mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum &lt;= M; <span class="comment">// 현재 값으로 예산을 맞출 수 있는지 확인</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; budgets, <span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 지원한 예산중 최댓값을 right로 지정</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; budgets.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (right &lt; budgets[i]) right = budgets[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이분 탐색</span></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (check(budgets, M, mid)) &#123;</span><br><span class="line">answer = mid;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-예산&quot;&gt;&lt;a href=&quot;#프로그래머스-예산&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - 예산&quot;&gt;&lt;/a&gt;프로그래머스 - 예산&lt;/h1&gt;&lt;h2 id=&quot;타겟-넘버&quot;&gt;&lt;a href=&quot;#타겟-넘버&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 - 스프링 시큐리티(Spring Security)</title>
    <link href="https://kyu9341.github.io/java/2020/04/14/java_springBootSecurity/"/>
    <id>https://kyu9341.github.io/java/2020/04/14/java_springBootSecurity/</id>
    <published>2020-04-14T14:12:28.000Z</published>
    <updated>2020-04-14T14:35:41.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스프링-부트-스프링-시큐리티-Spring-Security"><a href="#스프링-부트-스프링-시큐리티-Spring-Security" class="headerlink" title="스프링 부트 - 스프링 시큐리티(Spring Security)"></a>스프링 부트 - 스프링 시큐리티(Spring Security)</h2><ul><li>스프링 시큐리티는 사용자를 인증(Authentication)하고, 로그인후 프로그램의 각각의 기능에 대한 권한을 체크(Authorization)하는 작업을 구현해둔 보안 프레임워크 이다.</li><li>간단하게 스프링 부트에서 스프링 시큐리티를 연동해보자.</li></ul><ul><li>의존성 추가<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>스프링 시큐리티와 시큐리티 테스트, 타임리프 의존성을 추가한다.</li></ul><hr><ul><li><p><code>Application.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>HomeController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/my"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">my</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"my"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>WebSecurityConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>WebSecurityConfigurerAdapter</code>를 상속받아 시큐리티 관련 설정을 할 수 있다.</p></li></ul><hr><ul><li><code>index.html</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/hello"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/my"</span>&gt;</span>my page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>hello.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>my.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p>위와 같이 코드를 작성하고 Spring Security의존성이 추가된 상태로 애플리케이션을 실행하게 되면 다음과 같은 화면으로 이동한다.</p><div style="width: 380px; height: 350px;">  <img src="https://kyu9341.github.io/img/security1.png" style="width: 380px; height: 350px;"></div></li><li><p>어떤 페이지를 요청하여도 <code>/login</code>으로 이동하게 되며 로그인을 해야 다른 페이지를 사용 가능하다.</p><ul><li>기본 ID는 user이고 password는 다음과 같이 콘솔에 출력되는 것을 입력하면 된다.(password는 매번 달라진다.)<div style="width: 590px; height: 70px;">  <img src="https://kyu9341.github.io/img/security2.png" style="width: 590px; height: 70px;"></div></li></ul></li><li><p>로그인을 하면 다음과 같이 index화면으로 넘어가게 된다.</p><div style="width: 260px; height: 220px;">  <img src="https://kyu9341.github.io/img/security3.png" style="width: 260px; height: 220px;"></div></li></ul><hr><ul><li>테스트 코드 <code>HomeControllerTest.java</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">WebMvcTest</span>(<span class="title">HomeController</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HomeControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello_without_user</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>))</span><br><span class="line">                .andDo(print())</span><br><span class="line">                .andExpect(status().isUnauthorized());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@WithMockUser</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>))</span><br><span class="line">                .andDo(print())</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(view().name(<span class="string">"hello"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@WithMockUser</span> <span class="comment">// 가짜 유저 인증 정보</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">my</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/my"</span>))</span><br><span class="line">                .andDo(print())</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(view().name(<span class="string">"my"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>@WithMockUser</code>는 가짜 유저 인증 정보를 추가할 수 있다. Spring Security의존성을 추가하고 어노테이션을 붙이지 않은 상태로 테스트를 한다면 인증되지 않았다는 에러 메세지가 발생하지만 <code>@WithMockUser</code>로 인증 정보를 추가한 메서드는 정상적으로 동작한다.</li><li><code>hello_without_user</code>는 어노테이션을 붙이지 않았으므로 인증되지 않았다는 401 상태 코드를 응답받는다.</li></ul><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;스프링-부트-스프링-시큐리티-Spring-Security&quot;&gt;&lt;a href=&quot;#스프링-부트-스프링-시큐리티-Spring-Security&quot; class=&quot;headerlink&quot; title=&quot;스프링 부트 - 스프링 시큐리티(Spring Secur
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래머스 - k번째 수</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/14/programmers_42748/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/14/programmers_42748/</id>
    <published>2020-04-14T13:01:12.000Z</published>
    <updated>2020-04-14T15:12:05.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그래머스-k번째-수"><a href="#프로그래머스-k번째-수" class="headerlink" title="프로그래머스 - k번째 수"></a>프로그래머스 - k번째 수</h1><h2 id="k번째-수"><a href="#k번째-수" class="headerlink" title="k번째 수"></a>k번째 수</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.</p><p>예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면</p><ol><li>array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.</li><li>1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.</li><li>2에서 나온 배열의 3번째 숫자는 5입니다.</li></ol><p>배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h3><ul><li>array의 길이는 1 이상 100 이하입니다.</li><li>array의 각 원소는 1 이상 100 이하입니다.</li><li>commands의 길이는 1 이상 50 이하입니다.</li><li>commands의 각 원소는 길이가 3입니다.</li></ul><h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3><p>array    commands    return<br>[1, 5, 2, 6, 3, 7, 4]    [[2, 5, 3], [4, 4, 1], [1, 7, 3]]    [5, 6, 3]</p><ul><li>입출력 예 설명<br>[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.<br>[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.<br>[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.</li></ul><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://programmers.co.kr/learn/courses/30/lessons/42748" target="_blank" rel="external nofollow noopener noreferrer">https://programmers.co.kr/learn/courses/30/lessons/42748</a></p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>주어지는 구간의 원소들을 담을 벡터(tmp)를 생성하여 현재 구간의 원소를 모두 담는다.</li><li>tmp를 오름차순 정렬하여 정렬된 구간에서 k번째 수를 answer벡터에 추가한다.</li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; solution(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; commands) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; answer;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp; <span class="comment">// 이번 구간의 원소들을 담을 벡터</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; commands.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = commands[i][<span class="number">0</span>] - <span class="number">1</span>; j &lt; commands[i][<span class="number">1</span>]; j++) &#123;</span><br><span class="line">tmp.push_back(<span class="built_in">array</span>[j]);</span><br><span class="line">&#125;</span><br><span class="line">sort(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>()); <span class="comment">// 현재 구간 정렬</span></span><br><span class="line">answer.push_back(tmp[commands[i][<span class="number">2</span>] - <span class="number">1</span>]); <span class="comment">// 정렬된 구간에서의 k번째 수 삽입</span></span><br><span class="line">tmp.<span class="built_in">clear</span>(); <span class="comment">// 초기화</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;프로그래머스-k번째-수&quot;&gt;&lt;a href=&quot;#프로그래머스-k번째-수&quot; class=&quot;headerlink&quot; title=&quot;프로그래머스 - k번째 수&quot;&gt;&lt;/a&gt;프로그래머스 - k번째 수&lt;/h1&gt;&lt;h2 id=&quot;k번째-수&quot;&gt;&lt;a href=&quot;#k번째-
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 - 데이터베이스 초기화</title>
    <link href="https://kyu9341.github.io/java/2020/04/14/java_springBootDBinit/"/>
    <id>https://kyu9341.github.io/java/2020/04/14/java_springBootDBinit/</id>
    <published>2020-04-14T10:12:28.000Z</published>
    <updated>2020-04-14T11:40:10.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스프링-부트-데이터베이스-초기화"><a href="#스프링-부트-데이터베이스-초기화" class="headerlink" title="스프링 부트 - 데이터베이스 초기화"></a>스프링 부트 - 데이터베이스 초기화</h2><h4 id="JPA를-사용한-데이터베이스-초기화"><a href="#JPA를-사용한-데이터베이스-초기화" class="headerlink" title="JPA를 사용한 데이터베이스 초기화"></a>JPA를 사용한 데이터베이스 초기화</h4><ul><li><code>appication.properties</code><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">org.mariadb.jdbc.Driver</span></span><br><span class="line"><span class="comment"># database명이 springboot이다.</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mariadb://localhost:3307/springboot</span></span><br><span class="line"><span class="comment"># 자신의 userid (루트 계정이라면 root)</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">userid</span></span><br><span class="line"><span class="comment"># 자신의 password</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">password</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="comment"># 기본값 : false</span></span><br><span class="line"><span class="meta">spring.jpa.generate-ddl</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li><li><strong>spring.jpa.hibernate.ddl-auto</strong> 의 옵션에는 다음과 같은 값들을 넣을 수 있다.<ul><li><code>update</code> : 기존의 스키마를 유지하며 JPA에 의해 변경된 부분만 추가한다.</li><li><code>validate</code> : 엔티티와 테이블이 정상적으로 매핑되어있는지만 검증한다.</li><li><code>create</code> : 기존에 존재하는 스키마를 삭제하고 새로 생성한다.</li><li><code>create-drop</code> : 스키마를 생성하고 애플리케이션이 종료될 때 삭제한다.</li><li><code>none</code> : 초기화 동작을 하지 않는다.</li></ul></li><li><strong>spring.jpa.generate-ddl</strong> 은 위의 <strong>spring.jpa.hibernate.ddl-auto</strong> 속성을 사용할지 말지를 결정하는 옵션이다. 기본값이 false이기 JPA에 의한 자동 초기화 기능을 사용하려면 true로 바꾸고 사용한다.</li><li><strong>spring.jpa.show-sql</strong> 를 true로 하면 JPA가 생성한 SQL문을 보여준다.</li></ul><hr><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=create</span><br><span class="line"><span class="attr">spring.jpa.generate-ddl</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>다음 이미지는 위와 같이 설정을 주고 실행한 결과이다.</li></ul><div style="width: 1050px; height: 120px;">    <img src="https://kyu9341.github.io/img/dbinit1.png" style="width: 1050px    ; height: 120px;"></div><ul><li>기존에 존재하는 테이블이 drop되고 새로운 테이블이 생성되는 것을 볼 수 있다.</li></ul><hr><ul><li><p>서비스 운영 시에는 다음과 같은 설정을 주로 사용한다.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=validate</span><br><span class="line"><span class="attr">spring.jpa.generate-ddl</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>위와 같이 설정한 후 아래와 같이 기존 스키마를 가지는 Account클래스에 email필드를 추가한다.</p><div style="width: 450px; height: 50px;">  <img src="https://kyu9341.github.io/img/dbinit3.png" style="width: 450px; height: 50px;"></div></li><li><p>다시 서버를 실행하면 다음과 같은 에러가 발생한다.</p></li></ul><div style="width: 1200px; height: 150px;">    <img src="https://kyu9341.github.io/img/dbinit2.png" style="width: 1200px; height: 150px;"></div>- account 테이블에 email컬럼을 찾을 수 없다고 하고 애플리케이션이 바로 종료되는 것을 볼 수 있다.<hr><ul><li><p>이번에는 다음과 같이 설정하고 실행해보자.(개발할 때만 이런 설정을 주로 한다고 한다.)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=update</span><br><span class="line"><span class="attr">spring.jpa.generate-ddl</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>다음과 같이 테이블에 email 컬럼이 추가되어 alter 가 적용된 것을 볼 수 있다.</p><div style="width: 600px; height: 100px;">  <img src="https://kyu9341.github.io/img/dbinit4.png" style="width: 600px; height: 100px;"></div></li></ul><div style="width: 600px; height: 80px;">    <img src="https://kyu9341.github.io/img/dbinit5.png" style="width: 550px; height: 50px;"></div><ul><li>위와 같이 변경 사항이 적용된 것을 볼 수 있다. 하지만 이미 존재하는 컬럼의 이름을 바꾸는 것은 JPA가 자동으로 업데이트 해주지는 않는다.</li></ul><ul><li><code>Account.java</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="comment">// @GeneratedValue : Primary Key의 값을 자동 생성하기 위해 명시하는데 사용되는 어노테이션</span></span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">     <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Account account = (Account) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(id, account.id) &amp;&amp;</span><br><span class="line">                Objects.equals(username, account.username) &amp;&amp;</span><br><span class="line">                Objects.equals(password, account.password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, username, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="SQL-스크립트를-사용한-데이터베이스-초기화"><a href="#SQL-스크립트를-사용한-데이터베이스-초기화" class="headerlink" title="SQL 스크립트를 사용한 데이터베이스 초기화"></a>SQL 스크립트를 사용한 데이터베이스 초기화</h4><ul><li><p>다음과 같이 schema.sql 또는 schema-${platform}.sql 과 같은 파일을 생성하여 자동으로 데이터베이스를 초기화할 수 있다.</p></li><li><p><code>resources/schema.sql</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">account</span> <span class="keyword">if</span> <span class="keyword">exists</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">sequence</span> <span class="keyword">if</span> <span class="keyword">exists</span> hibernate_sequence</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">sequence</span> hibernate_sequence <span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1</span> <span class="keyword">increment</span> <span class="keyword">by</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span> (<span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span>, email <span class="built_in">varchar</span>(<span class="number">255</span>), <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">255</span>), username <span class="built_in">varchar</span>(<span class="number">255</span>), primary <span class="keyword">key</span> (<span class="keyword">id</span>))</span><br></pre></td></tr></table></figure></li><li><p>위와 같이 SQL 스크립트 파일로 초기화를 한다면 아래와 같이 <code>application.properties</code>를 설정해도 스프링 부트에서 자동으로 <code>schema.sql</code>의 sql을 실행하기 때문에 테이블이 삭제되었다가 다시 생성된다.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=validate</span><br><span class="line"><span class="attr">spring.jpa.generate-ddl</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard</a><br><a href="https://engkimbs.tistory.com/794?category=767865" target="_blank" rel="external nofollow noopener noreferrer">https://engkimbs.tistory.com/794?category=767865</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;스프링-부트-데이터베이스-초기화&quot;&gt;&lt;a href=&quot;#스프링-부트-데이터베이스-초기화&quot; class=&quot;headerlink&quot; title=&quot;스프링 부트 - 데이터베이스 초기화&quot;&gt;&lt;/a&gt;스프링 부트 - 데이터베이스 초기화&lt;/h2&gt;&lt;h4 id=&quot;J
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 - Spring-Data-JPA</title>
    <link href="https://kyu9341.github.io/java/2020/04/14/java_springBootJPA/"/>
    <id>https://kyu9341.github.io/java/2020/04/14/java_springBootJPA/</id>
    <published>2020-04-13T15:12:28.000Z</published>
    <updated>2020-04-14T11:39:58.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스프링-부트-Spring-Data-JPA"><a href="#스프링-부트-Spring-Data-JPA" class="headerlink" title="스프링 부트 - Spring-Data-JPA"></a>스프링 부트 - Spring-Data-JPA</h2><h4 id="ORM과-JPA"><a href="#ORM과-JPA" class="headerlink" title="ORM과 JPA"></a>ORM과 JPA</h4><ul><li><p><strong>ORM(Object-Relational Mapping)</strong></p><ul><li>객체와 릴레이션을 맵핑할 때 발생하는 개념적 불일치를 해결하는 프레임워크</li><li>객체와 DB의 테이블이 매핑을 이루는 것. 즉, 객체가 테이블이 되도록 매칭시키는 것을 말한다.</li><li>ORM을 이용하면 SQL Query가 아닌 직관적인 코드, 메소드로서 데이터를 조작할 수 있다.</li></ul></li><li><p><strong>JPA(Java Persistence API)</strong> : ORM을 위한 자바 (EE) 표준</p><ul><li>자바 ORM기술에 대한 API표준 명세를 말한다.</li><li>JPA는 ORM을 사용하기 위한 인터페이스를 모아둔 것이며, JPA를 구현한 Hibernate, EclipeLink, DataNucleus같은 ORM프레임 워크를 사용해야 한다.</li></ul></li><li><p>Spring-Data-JPA는 JPA를 쉽게 사용하기 위해 스프링에서 제공하는 프레임 워크이다.</p><ul><li>추상화 정도 : Spring-Data-JPA -&gt; JPA -&gt; Hibernate -&gt; DataSource (구체화)<ul><li>DataSource : 스프링과 연결된 DB를 연결하는 인터페이스</li></ul></li></ul></li></ul><h4 id="Spring-Data-JPA-연동-MariaDB"><a href="#Spring-Data-JPA-연동-MariaDB" class="headerlink" title="Spring-Data-JPA 연동 (MariaDB)"></a>Spring-Data-JPA 연동 (MariaDB)</h4><ul><li><p>의존성 추가</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mariadb.jdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mariadb-java-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>H2 데이터베이스를 추가하는 이유는 인메모리 데이터베이스로서 테스트를 위해 사용된다.</p></li><li><p><code>appication.properties</code> 마리아 DB 설정 추가</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">org.mariadb.jdbc.Driver</span></span><br><span class="line"><span class="comment"># database명이 springboot이다.</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mariadb://localhost:3307/springboot</span></span><br><span class="line"><span class="comment"># 자신의 userid (루트 계정이라면 root)</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">userid</span></span><br><span class="line"><span class="comment"># 자신의 password</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p>소스 코드</p></li><li><p><code>SpringbootjpaApplication.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootjpaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootjpaApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>account/Account.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kwon.springbootjpa.account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="comment">// @GeneratedValue : Primary Key의 값을 자동 생성하기 위해 명시하는데 사용되는 어노테이션</span></span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">     <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Account account = (Account) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(id, account.id) &amp;&amp;</span><br><span class="line">                Objects.equals(username, account.username) &amp;&amp;</span><br><span class="line">                Objects.equals(password, account.password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, username, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Entity</code> : 엔티티 클래스임을 지정하며 DB 테이블과 매핑하는 객체를 나타내는 어노테이션.</p><ul><li>DB상에서 table로서 표현</li></ul></li><li><p><code>@Id</code> : entity의 PRIMARY KEY를 나타냄</p></li><li><p><code>@GeneratedValue</code> : PRIMARY KEY의 값을 자동 생성하기 위해 명시하는 어노테이션</p></li><li><p><code>AccountRepository.java</code> 인터페이스</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;Entity Type, Id Type&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 해당 db의 username에 대한 객체를 반환</span></span><br><span class="line">    <span class="function">Account <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>AccountRepository의 구현체를 따로 작성하지 않아도 Spring-Data-JPA가 자동적으로 Username의 객체를 받아 자동적으로 DB Table과 매핑한다.</p></li></ul><ul><li><code>AccountRepositoryTest.java</code> 테스트 코드<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@DataJpaTest // 슬라이싱 테스트 : Repository와 관련된 빈들만 등록을 하여 테스트를 만드는 것</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRepositoryTest</span> </span>&#123; <span class="comment">// 슬라이싱 테스트에서는 인메모리 데이터베이스가 필요</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountRepository accountRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">di</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(Connection connection = dataSource.getConnection())&#123;</span><br><span class="line">            DatabaseMetaData metaData = connection.getMetaData();</span><br><span class="line">            System.out.println(metaData.getURL());</span><br><span class="line">            System.out.println(metaData.getDriverName());</span><br><span class="line">            System.out.println(metaData.getUserName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accountTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setUsername(<span class="string">"kwon"</span>);</span><br><span class="line">        account.setPassword(<span class="string">"1234"</span>);</span><br><span class="line"></span><br><span class="line">        Account newAccount = accountRepository.save(account);</span><br><span class="line"></span><br><span class="line">        assertThat(newAccount).isNotNull();</span><br><span class="line"></span><br><span class="line">        Account existingAccount = accountRepository.findByUsername(newAccount.getUsername());</span><br><span class="line">        assertThat(existingAccount).isNotNull();</span><br><span class="line"></span><br><span class="line">        Account nonExistingAccount = accountRepository.findByUsername(<span class="string">"kyu"</span>);</span><br><span class="line">        assertThat(nonExistingAccount).isNull();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>@DataJpaTest</code> : 슬라이싱 테스트 시 필요한 빈을 등록시키고 의존성을 추가한다.</li><li><code>@DataJpaTest</code>를 통한 테스트 시에는 H2 인메모리 데이터베이스를 사용하고, <code>@SpringBootTest</code>를 사용하여 테스트를 하는 경우 모든 테스트에 필요한 빈을 등록하므로 MariaDB를 사용한다.</li></ul><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard</a><br><a href="https://victorydntmd.tistory.com/195" target="_blank" rel="external nofollow noopener noreferrer">https://victorydntmd.tistory.com/195</a><br><a href="https://engkimbs.tistory.com/790?category=767865" target="_blank" rel="external nofollow noopener noreferrer">https://engkimbs.tistory.com/790?category=767865</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;스프링-부트-Spring-Data-JPA&quot;&gt;&lt;a href=&quot;#스프링-부트-Spring-Data-JPA&quot; class=&quot;headerlink&quot; title=&quot;스프링 부트 - Spring-Data-JPA&quot;&gt;&lt;/a&gt;스프링 부트 - Spring-Da
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 - DBCP, MariaDB 연동하기</title>
    <link href="https://kyu9341.github.io/java/2020/04/13/java_springBootMariaDB/"/>
    <id>https://kyu9341.github.io/java/2020/04/13/java_springBootMariaDB/</id>
    <published>2020-04-13T10:12:28.000Z</published>
    <updated>2020-04-13T13:09:46.193Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스프링-부트-DBCP-MariaDB-연동하기"><a href="#스프링-부트-DBCP-MariaDB-연동하기" class="headerlink" title="스프링 부트 - DBCP, MariaDB 연동하기"></a>스프링 부트 - DBCP, MariaDB 연동하기</h2><h4 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a>DBCP</h4><ul><li><strong>DBCP(Database Connection Pool)</strong> : DataBase와 Connection을 맺고 있는 객체를 관리하기 위한 Connection</li><li>DB와 연결된 커넥션(connection)을 미리 생성해서 풀(pool)속에 저장해두고 있다가 필요할 때 가져다 쓰고 반환한다.</li><li>미리 생성해두기 때문에 데이터베이스에 부하를 줄이고 유동적으로 연결을 관리할 수 있다.</li><li>DBCP는 애플리케이션의 성능에 큰 영향을 미친다.</li><li>스프링 부트는 HikariCP를 기본 DBCP로 사용한다.</li></ul><hr><h4 id="MariaDB-연동"><a href="#MariaDB-연동" class="headerlink" title="MariaDB 연동"></a>MariaDB 연동</h4><ul><li><p>MariaDB는 설치가 되어있다고 가정하고 진행한다.</p></li><li><p>의존성 추가(MariaDB)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mariadb.jdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mariadb-java-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>appication.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 커넥션 객체의 최대 수를 4개로 설정하겠다는 의미</span></span><br><span class="line"><span class="meta">spring.datasource.hikari.maximum-pool-size</span>=<span class="string">4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">org.mariadb.jdbc.Driver</span></span><br><span class="line"><span class="comment"># database명이 springboot이다.</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mariadb://localhost:3307/springboot</span></span><br><span class="line"><span class="comment"># 자신의 userid (루트 계정이라면 root)</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">userid</span></span><br><span class="line"><span class="comment"># 자신의 password</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure></li><li><p><code>SpringbootjdbcApplication.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootjdbcApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootjdbcApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>MariaDBRunner.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(Connection connection = dataSource.getConnection())&#123;</span><br><span class="line">            System.out.println(dataSource.getClass()); <span class="comment">// 어떤 DBCP를 사용하는지 확인</span></span><br><span class="line">            System.out.println(connection.getMetaData().getURL());</span><br><span class="line">            System.out.println(connection.getMetaData().getUserName());</span><br><span class="line"></span><br><span class="line">            Statement statement = connection.createStatement();</span><br><span class="line">            String sql = <span class="string">"CREATE TABLE USER(ID INTEGER NOT NULL, name VARCHAR(255), PRIMARY KEY (id))"</span>;</span><br><span class="line">            statement.executeUpdate(sql);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        jdbcTemplate.execute(<span class="string">"INSERT INTO USER VALUES (1, 'kwon')"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>MySQL Client (MariaDB 10.4 (x64))</code>를 사용하여 접속하여 확인하면 다음과 같이 생성한 테이블과 삽입한 행을 확인할 수 있다.</p></li></ul><div style="width: 358px; height: 155px;">    <img src="https://kyu9341.github.io/img/maria1.png" style="width: 358px    ; height: 155px;"></div><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;스프링-부트-DBCP-MariaDB-연동하기&quot;&gt;&lt;a href=&quot;#스프링-부트-DBCP-MariaDB-연동하기&quot; class=&quot;headerlink&quot; title=&quot;스프링 부트 - DBCP, MariaDB 연동하기&quot;&gt;&lt;/a&gt;스프링 부트 - DB
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 - 인메모리 데이터베이스</title>
    <link href="https://kyu9341.github.io/java/2020/04/13/java_springBootInmemoryDB/"/>
    <id>https://kyu9341.github.io/java/2020/04/13/java_springBootInmemoryDB/</id>
    <published>2020-04-13T05:12:28.000Z</published>
    <updated>2020-04-13T06:01:33.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스프링-부트-인메모리-데이터베이스"><a href="#스프링-부트-인메모리-데이터베이스" class="headerlink" title="스프링 부트 - 인메모리 데이터베이스"></a>스프링 부트 - 인메모리 데이터베이스</h2><ul><li><p>인메모리 데이터베이스는 애플리케이션 서버의 메모리를 이용하는 데이터베이스 시스템이다.</p><ul><li>데이터베이스 서버가 꺼지게 되면 저장된 데이터가 모두 사라진다.</li></ul></li><li><p>스프링 부트가 지원하는 인-메모리 데이터베이스는 다음과 같이 세가지가 있다.</p><ul><li>H2</li><li>HSQL</li><li>Derby</li></ul></li><li><p>Spring-JDBC가 클래스패스에 있으면 자동 설정이 필요한 빈을 설정해준다.</p><ul><li>DataSource  </li><li>JdbcTemplate</li></ul></li><li><p>의존성 추가</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>H2 db를 의존성에 추가하고 다른 설정을 하지 않으면 자동으로 H2 db를 기본 데이터베이스로 채택한다.</p></li><li><p>spring-boot-starter-jdbc 의존성을 추가하면 DataSource, JdbcTemplate를 빈 주입으로 사용 가능하다.</p></li></ul><hr><ul><li><p><code>SpringbootjdbcApplication.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootjdbcApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootjdbcApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ApplicationRunner.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">H2Runner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(Connection connection = dataSource.getConnection())&#123;</span><br><span class="line">            System.out.println(connection.getMetaData().getURL());</span><br><span class="line">            System.out.println(connection.getMetaData().getUserName());</span><br><span class="line"></span><br><span class="line">            Statement statement = connection.createStatement();</span><br><span class="line">            String sql = <span class="string">"CREATE TABLE USER(ID INTEGER NOT NULL, name VARCHAR(255), PRIMARY KEY (id))"</span>;</span><br><span class="line">            statement.executeUpdate(sql);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        jdbcTemplate.execute(<span class="string">"INSERT INTO USER VALUES (1, 'kwon')"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>dataSource를 사용하여 H2에 접속해 쿼리를 수행한다.</p></li><li><p>jdbcTemplate을 사용하면 좀 더 편리하게 쿼리를 작성할 수 있다.</p></li><li><p><code>application.properties</code>에 <code>spring.h2.console.enabled=true</code>를 추가하면 h2콘솔을 이용할 수 있다.</p></li><li><p><code>http://localhost:8080/h2-console</code>로 접속하여 아래와 같이 JDBC URL을 <code>jdbc:h2:mem:testdb</code>로 입력하고 connect를 누르면 접속할 수 있다.</p></li></ul><div style="width: 450px; height: 310px;">    <img src="https://kyu9341.github.io/img/jdbc_1.png" style="width: 450px    ; height: 310px;"></div><ul><li>위의 소스 코드에서 작성한 쿼리문이 실행되어 USER테이블이 생성되고 하나의 행이 정상적으로 삽입된 것을 볼 수 있다.<div style="width: 540px; height: 300px;">  <img src="https://kyu9341.github.io/img/jdbc_2.png" style="width: 540px  ; height: 300px;"></div></li></ul><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;스프링-부트-인메모리-데이터베이스&quot;&gt;&lt;a href=&quot;#스프링-부트-인메모리-데이터베이스&quot; class=&quot;headerlink&quot; title=&quot;스프링 부트 - 인메모리 데이터베이스&quot;&gt;&lt;/a&gt;스프링 부트 - 인메모리 데이터베이스&lt;/h2&gt;&lt;ul&gt;

      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 웹 MVC - CORS(Cross-Origin Resource Sharing)</title>
    <link href="https://kyu9341.github.io/java/2020/04/13/java_springBootCORS/"/>
    <id>https://kyu9341.github.io/java/2020/04/13/java_springBootCORS/</id>
    <published>2020-04-13T01:12:28.000Z</published>
    <updated>2020-04-13T05:57:05.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스프링-부트-CORS-Cross-Origin-Resource-Sharing"><a href="#스프링-부트-CORS-Cross-Origin-Resource-Sharing" class="headerlink" title="스프링 부트 - CORS(Cross-Origin Resource Sharing)"></a>스프링 부트 - CORS(Cross-Origin Resource Sharing)</h2><ul><li><p><strong>Origin</strong> : 아래의 세 가지 요소를 조합한 것을 하나의 Origin이라고 한다.</p><ul><li>URI 스키마(http, https)</li><li>hostname(localhost 등..)</li><li>포트(8080, 18080 .. )</li></ul></li><li><p><strong>Single-Origin Policy</strong> 에서는 하나의 Origin이 다른 Origin을 서로 호출할 수 없다.</p></li><li><p>예를 들어, REST api를 제공하는 서버가 <a href="http://localhost:8080" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:8080</a> 에서 제공이 되고, 그 REST api를 <a href="http://localhost:18080" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:18080</a> 을 사용하는 application이 호출할 수 없다.</p></li><li><p>Cross-Origin Resource Sharing 에서는 위와 같이 동일한 Origin이 아니더라도 서로 다른 Origin에서 자원을 요청하여 사용할 수 있게 해준다.</p></li><li><p>CORS을 적용하려면 웹 어플리케이션에 그에 따른 처리를 해야하고 스프링 부트에서는 <code>@CrossOrigin</code> 어노테이션 혹은 WebConfig를 통해 CORS를 적용하는 방법을 제공한다.</p></li></ul><h4 id="Single-Origin-Policy"><a href="#Single-Origin-Policy" class="headerlink" title="Single-Origin Policy"></a>Single-Origin Policy</h4><ul><li><p>두 개의 프로젝트롤 생성하여 하나는 서버로써 REST api를 간단하게 만들어 호출할 수 있도록 하고, 하나는 클라이언트로써 ajax를 통해 다른 Origin에서 자원을 요청하도록 만든다.</p></li><li><p>서버측 소스 <code>SpringcorsserverApplication.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcorsserverApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcorsserverApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>/hello</code>로 요청을 보내면 Hello를 응답하는 api이다.</p></li></ul><hr><ul><li>클라이언트측 소스</li><li><code>application.properties</code>에 <code>server.port=18080</code>를 추가한다.</li><li><code>SpringcorsclientApplication.java</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcorsclientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcorsclientApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>index.html</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>CORS Client<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/webjars/jquery/3.4.1/dist/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(<span class="string">"http://localhost:8080/hello"</span>)</span></span><br><span class="line"><span class="actionscript">            .done(<span class="function"><span class="keyword">function</span> <span class="params">(msg)</span> </span>&#123;</span></span><br><span class="line">                alert(msg);</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="actionscript">            .fail(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"fail"</span>)</span></span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>http://localhost:8080/hello</code>로 ajax로 요청을 보내 성공했다면 응답받은 메세지를, 실패했다면 fail을 표시한다.</li></ul><div style="width: 900px; height: 120px;">    <img src="https://kyu9341.github.io/img/cors1.png" style="width: 900px    ; height: 120px;"></div><div style="width: 800px; height: 50px;">    <img src="https://kyu9341.github.io/img/cors2.png" style="width: 800px    ; height: 50px;"></div><ul><li>위와 같이 실패했다는 메세지와 함께 오류가 발생한 것을 볼 수 있다.</li><li><code>Access-Control-Allow-Origin</code>라는 해더를 서버가 보내주어야 한다. (어떤 Origin이 접근할 수 있는지 알려주는 해더)</li></ul><h4 id="CORS-적용-CrossOrigin"><a href="#CORS-적용-CrossOrigin" class="headerlink" title="CORS 적용 - @CrossOrigin"></a>CORS 적용 - @CrossOrigin</h4><ul><li>서버측 소스 <code>SpringcorsserverApplication.java</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcorsserverApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://localhost:18080"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcorsserverApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>@CrossOrigin(origins = &quot;http://localhost:18080&quot;)</code>와 같이 어노테이션을 추가하여 허용할 Origin을 작성하면 된다.</li></ul><div style="width: 900px; height: 120px;">    <img src="https://kyu9341.github.io/img/cors3.png" style="width: 900px    ; height: 120px;"></div>- 이번에는 Hello라는 응답이 정상적으로 출력되는 것을 볼 수 있다.<h4 id="CORS-적용-WepConfig"><a href="#CORS-적용-WepConfig" class="headerlink" title="CORS 적용 - WepConfig"></a>CORS 적용 - WepConfig</h4><ul><li><p>설정을 위와 같이 어노테이션으로 모든 메소드에 하기 힘들다면 WepConfig 라는 설정파일을 작성하여 설정할 수 있다.</p></li><li><p>서버측 소스 <code>WebConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">"http://localhost:18080"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>/**</code> : 모든 <code>http://localhost:18080</code>를 포함한 요청을 허용하도록 한다.</p></li><li><p>위와 같이 설정파일을 만들어서 사용하면 글로벌한 설정으로 cors를 적용할 수 있다.</p></li></ul><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;스프링-부트-CORS-Cross-Origin-Resource-Sharing&quot;&gt;&lt;a href=&quot;#스프링-부트-CORS-Cross-Origin-Resource-Sharing&quot; class=&quot;headerlink&quot; title=&quot;스프링 부트 - C
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 웹 MVC - HATEOAS(Hypermedia As The Engine Of Application State)</title>
    <link href="https://kyu9341.github.io/java/2020/04/13/java_springBootHATEOAS/"/>
    <id>https://kyu9341.github.io/java/2020/04/13/java_springBootHATEOAS/</id>
    <published>2020-04-13T00:12:28.000Z</published>
    <updated>2020-04-13T05:56:33.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스프링-부트-HATEOAS-Hypermedia-As-The-Engine-Of-Application-State"><a href="#스프링-부트-HATEOAS-Hypermedia-As-The-Engine-Of-Application-State" class="headerlink" title="스프링 부트 - HATEOAS(Hypermedia As The Engine Of Application State)"></a>스프링 부트 - HATEOAS(Hypermedia As The Engine Of Application State)</h2><ul><li>링크에 사용 가능한 URL을 리소스로 전달하여 client가 참고하여 사용할 수 있도록 하는 것</li><li>HATEOAS는 RESTful API를 사용하는 클라이언트가 전적으로 서버에 의해 동적으로 상호작용을 할 수 있다.<ul><li>클라이언트가 서버에 요청시 서버는 요청에 의존되는 URI를 Response에 포함시켜 반환한다.</li></ul></li></ul><h3 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h3><ul><li>REST API는 Representational State Transfer API의 약자로, 간단히 설명하면 웹 애플리케이션이 제공하는 각각의 데이터를 리소스, 즉 자원으로 간주하고 각각의 자원에 고유한 URI(Uniform Resource Identifier)를 할당함으로써 이를 표현하는 API를 정의하기 위한 소프트웨어 아키텍처 스타일이다.</li></ul><hr><ul><li><p>의존성 추가</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-hateoas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>테스트 코드</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">WebMvcTest</span>(<span class="title">SampleController</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SampleControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>))</span><br><span class="line">                .andDo(print())</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(jsonPath(<span class="string">"$._links.self"</span>).exists());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>_links</code>는 HEATEOAS를 구현하기 위해 스프링 부트에서 생성한 JSON name이다. 그 뒤의 self는 자기 참조를 뜻하는 것을 JSON을 통해서 나타낸 것이다.</p></li></ul><hr><ul><li><p>소스 코드</p></li><li><p><code>DemospringhateoasApplication.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemospringhateoasApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemospringhateoasApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Hello.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix+ <span class="string">" "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>SampleController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EntityModel&lt;Hello&gt; <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Hello hello = <span class="keyword">new</span> Hello();</span><br><span class="line">        hello.setPrefix(<span class="string">"Hey, "</span>);</span><br><span class="line">        hello.setName(<span class="string">"Kwon"</span>);</span><br><span class="line"></span><br><span class="line">        EntityModel&lt;Hello&gt; helloEntityModel = <span class="keyword">new</span> EntityModel&lt;&gt;(hello);</span><br><span class="line">        helloEntityModel.add(linkTo(methodOn(SampleController<span class="class">.<span class="keyword">class</span>).<span class="title">hello</span>()).<span class="title">withSelfRel</span>())</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helloEntityModel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>EntityModel 객체에 HATEOAS를 구현하기 위해 <code>/hello</code> URL의 링크 정보를 추가한다.</p></li><li><p>withSelfRel 메소드로 해당 URL이 자기 참조인 것을 나타낸다.</p></li></ul><p><code>Body = {&quot;prefix&quot;:&quot;Hey, &quot;,&quot;name&quot;:&quot;Kwon&quot;,&quot;_links&quot;:{&quot;self&quot;:{&quot;href&quot;:&quot;http://localhost/hello&quot;}}}</code></p><ul><li>테스트를 돌려보면 다음과 같이 추가된 링크 정보가 출력되는 것을 볼 수 있다.</li></ul><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;스프링-부트-HATEOAS-Hypermedia-As-The-Engine-Of-Application-State&quot;&gt;&lt;a href=&quot;#스프링-부트-HATEOAS-Hypermedia-As-The-Engine-Of-Application-State
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 웹 MVC - ExceptionHandler</title>
    <link href="https://kyu9341.github.io/java/2020/04/12/java_springBootException/"/>
    <id>https://kyu9341.github.io/java/2020/04/12/java_springBootException/</id>
    <published>2020-04-12T06:12:28.000Z</published>
    <updated>2020-04-13T05:56:31.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스프링-부트-ExceptionHandler"><a href="#스프링-부트-ExceptionHandler" class="headerlink" title="스프링 부트 ExceptionHandler"></a>스프링 부트 ExceptionHandler</h2><ul><li>스프링 부트는 에러 핸들러기 기본적으로 등록이 되어있다.</li><li>스프링 부트가 제공하는 기본 예외 처리기<ul><li>BasicErrorController<ul><li>HTML과 JSON 응답 지원</li></ul></li><li>커스터마이징 방법<ul><li>EroorController구현</li></ul></li></ul></li></ul><hr><h4 id="소스-코드"><a href="#소스-코드" class="headerlink" title="소스 코드"></a>소스 코드</h4><ul><li>SpringbootexceptionApplication.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootexceptionApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootexceptionApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>SampleException.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>AppError.java : Exception발생 시 해당 Exception에 대한 정보를 저장</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppError</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String reason;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getReason</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reason;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReason</span><span class="params">(String reason)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.reason = reason;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SampleController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SampleException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(SampleException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> @<span class="title">ResponseBody</span> <span class="title">AppError</span> <span class="title">sampleError</span>(<span class="title">SampleException</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        AppError appError = <span class="keyword">new</span> AppError();</span><br><span class="line">        appError.setMessage(<span class="string">"error.app.key"</span>);</span><br><span class="line">        appError.setReason(<span class="string">"IDK IDK IDK"</span>);</span><br><span class="line">        <span class="keyword">return</span> appError;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>/hello 라는 요청이 들어오면 SampleException을 발생시킨다.</p><ul><li>@ExceptionHandler 어노테이션이 해당 예외를 받아서 처리</li></ul></li><li><p>appError객체에 메시지를 넣고 반환한다. (JSON형식)</p></li></ul><div style="width: 400px; height: 120px;">    <img src="https://kyu9341.github.io/img/exception1.png" style="width: 400px    ; height: 120px;"></div>- 위와 같이 JSON형태로 반환되는 것을 볼 수 있다.<h3 id="커스텀-에러-페이지"><a href="#커스텀-에러-페이지" class="headerlink" title="커스텀 에러 페이지"></a>커스텀 에러 페이지</h3><ul><li>상태 코드 값에 따라 에러 페이지 보여줄 수 있다.</li><li>src/main/resources/(static or templates)/error/ 와 같은 경로에 html파일을 작성하면 된다.<ul><li>이때, 404와 같이 파일명이 상태 코드와 같거나 5xx같이 패턴을 맞추어 파일명을 만들어야 한다.</li></ul></li></ul><hr><ul><li>위에서 작성했던 SampleController에서 @ExceptionHandler 부분을 주석으로 변경하여 500번대 에러를 발생시킬 수 있도록 한다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> SampleException();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*    @ExceptionHandler(SampleException.class)</span></span><br><span class="line"><span class="comment">  public @ResponseBody AppError sampleError(SampleException e)&#123;</span></span><br><span class="line"><span class="comment">      AppError appError = new AppError();</span></span><br><span class="line"><span class="comment">      appError.setMessage("error.app.key");</span></span><br><span class="line"><span class="comment">      appError.setReason("IDK IDK IDK");</span></span><br><span class="line"><span class="comment">      return appError;</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p>resources/static/ 의 경로에 다음과 같이 html파일을 작성한다.</p></li><li><p><code>404.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><div style="width: 400px; height: 120px;">  <img src="https://kyu9341.github.io/img/exception2.png" style="width: 400px  ; height: 120px;"></div></li><li><p><code>/</code>에 대한 페이지를 작성하지 않았기 때문에 Not Found(404)에러가 발생하여 404.html이 반환된 것을 확인할 수 있다.</p></li></ul><hr><ul><li><code>5xx.html</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>5xx<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><div style="width: 400px; height: 120px;">    <img src="https://kyu9341.github.io/img/exception3.png" style="width: 400px    ; height: 120px;"></div><ul><li><code>/hello</code> 요청을 보내면 예외를 발생시키도록 작성해두었으므로 500번대 서버 에러가 발생하여 5xx.html 이 반환된 것을 볼 수 있다.</li></ul><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;스프링-부트-ExceptionHandler&quot;&gt;&lt;a href=&quot;#스프링-부트-ExceptionHandler&quot; class=&quot;headerlink&quot; title=&quot;스프링 부트 ExceptionHandler&quot;&gt;&lt;/a&gt;스프링 부트 ExceptionH
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 웹 MVC - Thymeleaf, HtmlUnit</title>
    <link href="https://kyu9341.github.io/java/2020/04/12/java_springBootThymeleaf/"/>
    <id>https://kyu9341.github.io/java/2020/04/12/java_springBootThymeleaf/</id>
    <published>2020-04-12T02:12:28.000Z</published>
    <updated>2020-04-13T05:56:49.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스프링-부트-Thymeleaf-HtmlUnit"><a href="#스프링-부트-Thymeleaf-HtmlUnit" class="headerlink" title="스프링 부트 Thymeleaf, HtmlUnit"></a>스프링 부트 Thymeleaf, HtmlUnit</h2><h3 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h3><ul><li>스프링 부트가 자동 설정을 지원하는 템플릿 엔진<ul><li>FreeMarker</li><li>Groovy</li><li>Thymeleaf</li><li>Mustche</li></ul></li><li>스프링 부트에서 JSP를 권장하지 않는 이유<ul><li>스프링 부트는 독립적으로 실행가능한 임베디드 톰캣으로 애플리케이션을 빠르고 쉽게 만들어서 배포하길 바란다.</li><li>JSP를 사용하면 JAR 패키징 할 때는 동작하지 않고, WAR 패키징을 해야 한다.</li><li>Undertow는 JSP를 지원하지 않는다.</li></ul></li></ul><hr><ul><li><p>기본적으로 자동설정이 적용이 되면 동적으로 생성되는 뷰는 resources/templates에서 찾게 된다.</p></li><li><p>Thymeleaf를 사용하려면 다음과 같은 의존성을 추가해야 한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>테스트 코드 작성<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">WebMvcTest</span>(<span class="title">SampleController</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SampleControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 요청 "/hello"</span></span><br><span class="line">        <span class="comment">// - 응답 모델 name : kwon</span></span><br><span class="line">        <span class="comment">// - 뷰 이름 : hello</span></span><br><span class="line">        <span class="comment">// 뷰의 이름과 모델의 데이터, 렌더링 된 결과를 확인하는 테스트</span></span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andDo(print()) <span class="comment">// 렌더링 결과 확인 (타임리프라 가능)</span></span><br><span class="line">                .andExpect(view().name(<span class="string">"hello"</span>)) <span class="comment">// 뷰의 이름</span></span><br><span class="line">                .andExpect(model().attribute(<span class="string">"name"</span>, is(<span class="string">"kwon"</span>))) <span class="comment">// 모델의 데이터</span></span><br><span class="line">                .andExpect(content().string(containsString(<span class="string">"kwon"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>뷰의 이름과 모델의 데이터, 렌더링 된 결과를 확인하는 테스트</li><li>Thymeleaf에서 렌더링한 HTML을 확인할 수 있다.</li></ul><hr><ul><li>소스 코드 작성</li><li>SpringbootmvcApplication.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootmvcApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootmvcApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>SampleController.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 여기서 리턴하는 String은 뷰의 이름</span></span><br><span class="line">        <span class="comment">// @RestController가 아니기 때문에 응답의 본문을 리턴하는 것이 아님</span></span><br><span class="line">        <span class="comment">// 데이터는 model에 담음</span></span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, <span class="string">"kwon"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Model 객체에 name:kwon 을 추가</li></ul><hr><ul><li>템플릿 작성</li><li>resources/tamplates/hello.html<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--xml 네임스페이스를 추가해야함(th)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;name&#125;"</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>Thymeleaf를 사용하려면 <code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code>를 추가하는 것이 반드시 필요한다.</li><li>값을 성공적으로 받아온다면 <code>${name}</code>에 넘어온 kwon이 출력될 것이고, 아니라면 Name가 출력될 것이다.</li></ul><div style="width: 400px; height: 120px;">    <img src="https://kyu9341.github.io/img/thymeleaf1.png" style="width: 400px    ; height: 120px;"></div><hr><h3 id="HtmlUnit"><a href="#HtmlUnit" class="headerlink" title="HtmlUnit"></a>HtmlUnit</h3><ul><li>HtmlUnit : HTML을 단위테스트 하기 위한 툴</li><li>템플릿 뷰 테스트에 유용</li></ul><ul><li><p>다음과 같은 htmlunit 의존성을 추가한다. (scope이 테스트 이므로 테스트할 때만 사용)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>htmlunit-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.htmlunit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>htmlunit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>테스트 코드</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">WebMvcTest</span>(<span class="title">SampleController</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SampleControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    WebClient webClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HtmlPage page = webClient.getPage(<span class="string">"/hello"</span>);</span><br><span class="line">        HtmlHeading1 h1 = page.getFirstByXPath(<span class="string">"//h1"</span>);</span><br><span class="line">        assertThat(h1.getTextContent()).isEqualToIgnoringCase(<span class="string">"kwon"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>h1태그의 정보를 얻어서 테스트를 수행한다.</p></li></ul><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;스프링-부트-Thymeleaf-HtmlUnit&quot;&gt;&lt;a href=&quot;#스프링-부트-Thymeleaf-HtmlUnit&quot; class=&quot;headerlink&quot; title=&quot;스프링 부트 Thymeleaf, HtmlUnit&quot;&gt;&lt;/a&gt;스프링 부트 Thy
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 웹 MVC - Index 페이지와 파비곤(Favicon)</title>
    <link href="https://kyu9341.github.io/java/2020/04/11/java_springBootIndexFavicon/"/>
    <id>https://kyu9341.github.io/java/2020/04/11/java_springBootIndexFavicon/</id>
    <published>2020-04-11T02:12:28.000Z</published>
    <updated>2020-04-12T03:41:44.745Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Index-페이지와-파비곤-Favicon"><a href="#Index-페이지와-파비곤-Favicon" class="headerlink" title="Index 페이지와 파비곤(Favicon)"></a>Index 페이지와 파비곤(Favicon)</h2><ul><li><p><strong>웰컴 페이지</strong> : 애플리케이션 root로 요청을 했을 때 보여주는 페이지. 정적 페이지로 index를 보여주는 방법은 기본 리소스 위치에(resources/static/ 등..) index.html파일을 두면 애플리케이션이 해당 html을 반환한다.</p></li><li><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Welcome!! Spring Boot~!!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>루트 페이지 방문 시</p><div style="width: 500px; height: 100px;">  <img src="https://kyu9341.github.io/img/static4.png" style="width: 500px  ; height: 100px;"></div></li><li><p><strong>파비콘(Favicon)</strong> : 파비콘은 웹페이지에 접속했을때, 상단 탭에 보여지는 아이콘을 일컫는다. 이 아이콘은 즐겨찾기에 웹페이지를 등록할때도 사용된다. 웹사이트를 대표하는 로고(logo)의 개념과 비슷하며, 사이트의 성격을 드러내기도 한다.</p></li></ul><p><a href="https://favicon.io/" target="_blank" rel="external nofollow noopener noreferrer">https://favicon.io/</a><br>위의 웹 사이트에서 파비콘을 만들 수 있다.</p><ul><li>만든 파비콘을 index.html이 있는 경로에 같이 둔다.(/static/favicon.ico)</li></ul><div style="width: 450px; height: 150px;">    <img src="https://kyu9341.github.io/img/static5.png" style="width: 450px    ; height: 150px;"></div><ul><li>만약 파비콘이 제대로 나오지 않는다면 ide를 재시작 해보고, <a href="http://localhost:8080/favicon.ico" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:8080/favicon.ico</a> 로 직접 요청 후에 서버를 재시작하면 제대로 동작할 수도 있다.</li><li>그래도 안된다면 모든 브라우저를 닫고 다시 시작하여 접속해보자. (나는 이렇게 해서 됐다.)</li></ul><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard</a><br><a href="https://webdir.tistory.com/337" target="_blank" rel="external nofollow noopener noreferrer">https://webdir.tistory.com/337</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Index-페이지와-파비곤-Favicon&quot;&gt;&lt;a href=&quot;#Index-페이지와-파비곤-Favicon&quot; class=&quot;headerlink&quot; title=&quot;Index 페이지와 파비곤(Favicon)&quot;&gt;&lt;/a&gt;Index 페이지와 파비곤(Favi
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>이미 사용중인 8080 포트 에러 [org.springframework.boot.web.server.PortInUseException: Port 8080 is already in use]</title>
    <link href="https://kyu9341.github.io/error/2020/04/11/Error1/"/>
    <id>https://kyu9341.github.io/error/2020/04/11/Error1/</id>
    <published>2020-04-11T00:51:12.000Z</published>
    <updated>2020-04-11T01:35:02.338Z</updated>
    
    <content type="html"><![CDATA[<h2 id="org-springframework-boot-web-server-PortInUseException-Port-8080-is-already-in-use"><a href="#org-springframework-boot-web-server-PortInUseException-Port-8080-is-already-in-use" class="headerlink" title="org.springframework.boot.web.server.PortInUseException: Port 8080 is already in use"></a>org.springframework.boot.web.server.PortInUseException: Port 8080 is already in use</h2><ul><li><p>톰캣을 실행시키는데 다음과 같은 에러가 발생한다.</p></li><li><p>이미 8080포트가 사용중이라고 한다.</p></li><li><p>자주 볼 것 같은 에러이니 정리를 해두자.</p></li><li><p>에러 전문</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.web</span><span class="selector-class">.server</span><span class="selector-class">.PortInUseException</span>: <span class="selector-tag">Port</span> 8080 <span class="selector-tag">is</span> <span class="selector-tag">already</span> <span class="selector-tag">in</span> <span class="selector-tag">use</span></span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.web</span><span class="selector-class">.embedded</span><span class="selector-class">.tomcat</span><span class="selector-class">.TomcatWebServer</span><span class="selector-class">.start</span>(<span class="selector-tag">TomcatWebServer</span><span class="selector-class">.java</span><span class="selector-pseudo">:213)</span> ~<span class="selector-attr">[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]</span></span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.context</span><span class="selector-class">.ServletWebServerApplicationContext</span><span class="selector-class">.startWebServer</span>(<span class="selector-tag">ServletWebServerApplicationContext</span><span class="selector-class">.java</span><span class="selector-pseudo">:297)</span> ~<span class="selector-attr">[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]</span></span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.context</span><span class="selector-class">.ServletWebServerApplicationContext</span><span class="selector-class">.finishRefresh</span>(<span class="selector-tag">ServletWebServerApplicationContext</span><span class="selector-class">.java</span><span class="selector-pseudo">:163)</span> ~<span class="selector-attr">[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]</span></span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.support</span><span class="selector-class">.AbstractApplicationContext</span><span class="selector-class">.refresh</span>(<span class="selector-tag">AbstractApplicationContext</span><span class="selector-class">.java</span><span class="selector-pseudo">:553)</span> ~<span class="selector-attr">[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]</span></span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.context</span><span class="selector-class">.ServletWebServerApplicationContext</span><span class="selector-class">.refresh</span>(<span class="selector-tag">ServletWebServerApplicationContext</span><span class="selector-class">.java</span><span class="selector-pseudo">:141)</span> ~<span class="selector-attr">[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]</span></span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.SpringApplication</span><span class="selector-class">.refresh</span>(<span class="selector-tag">SpringApplication</span><span class="selector-class">.java</span><span class="selector-pseudo">:747)</span> ~<span class="selector-attr">[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]</span></span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.SpringApplication</span><span class="selector-class">.refreshContext</span>(<span class="selector-tag">SpringApplication</span><span class="selector-class">.java</span><span class="selector-pseudo">:397)</span> ~<span class="selector-attr">[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]</span></span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.SpringApplication</span><span class="selector-class">.run</span>(<span class="selector-tag">SpringApplication</span><span class="selector-class">.java</span><span class="selector-pseudo">:315)</span> ~<span class="selector-attr">[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]</span></span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.SpringApplication</span><span class="selector-class">.run</span>(<span class="selector-tag">SpringApplication</span><span class="selector-class">.java</span><span class="selector-pseudo">:1226)</span> ~<span class="selector-attr">[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]</span></span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.SpringApplication</span><span class="selector-class">.run</span>(<span class="selector-tag">SpringApplication</span><span class="selector-class">.java</span><span class="selector-pseudo">:1215)</span> ~<span class="selector-attr">[spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]</span></span><br><span class="line"><span class="selector-tag">at</span> <span class="selector-tag">com</span><span class="selector-class">.kwon</span><span class="selector-class">.demospringmvc</span><span class="selector-class">.DemospringmvcApplication</span><span class="selector-class">.main</span>(<span class="selector-tag">DemospringmvcApplication</span><span class="selector-class">.java</span><span class="selector-pseudo">:11)</span> ~<span class="selector-attr">[classes/:na]</span></span><br></pre></td></tr></table></figure></li><li><p>해결 방법으로는 사용중이 아닌 다른 포트번호를 사용하거나, 현재 8080포트로 동작중인 프로세스를 강제로 종료하는 방법이 있다.</p><ul><li>나는 포트번호를 바꾸고 싶지 않으니 강제로 8080포트의 프로세스를 종료시킬 것이다.</li></ul></li><li><p>cmd에서 netstat 라는 명령어를 사용하면 현재 TCP/IP 네트워크 연결 상태를 확인할 수 있다.</p></li><li><p><code>netstat -ano</code> 명령어로 어떤 프로세스가 8080포트를 사용중인지 확인해보자.</p><ul><li>-a : 모든 연결 및 수신 대기 포트를 표시</li><li>-n : 주소 및 포트 번호를 숫자 형식으로 표시</li><li>-o : 각 연결의 소유자 프로세스 ID를 표시</li></ul></li></ul>  <div style="width: 500px; height: 120px;">      <img src="https://kyu9341.github.io/img/cmd1.png" style="width: 600px      ; height: 80px;">  </div><ul><li>위와 같이 <code>35436</code> 라는 PID(프로세스 아이디)의 프로세스가 8080포트를 사용중인 것을 볼 수 있다.</li><li>프로세스를 종료하는 방법은 두 가지가 있다.</li></ul><ol><li>작업관리자를 열어 <strong>세부정보</strong> 로 이동하면 현제 프로세스들의 PID를 포함한 여러 정보를 볼 수 있다. 여기서 8080포트를 사용중이었던 <code>35436</code>이라는 PID를 가지는 프로세스를 종료시켜주면 된다.</li><li>cmd에서 taskkill 명령어를 사용하여 종료시킬 수 있다. <code>taskkill /f /pid 35436</code>과 같이 종료하고 싶은 PID를 함께 입력하면 원하는 프로세스를 종료할 수 있다.</li></ol><ul><li>만약 리눅스 기반 환경이라면<ul><li><code>lsof -i :&quot;포트 번호&quot;</code>를 통해 프로세스 번호를 찾고 <code>kill -9 &quot;프로세스 번호&quot;</code>로 프로세스를 종료할 수 있다.</li><li>또는 <code>lsof -i tcp:8080</code>명령어로 확인하고 <code>kill $(lsof -t -i:8080)</code>명령으로 프로세스를 종료할 수 있다.</li></ul></li></ul><blockquote><p>참조<br><a href="https://it-jin-developer.tistory.com/16" target="_blank" rel="external nofollow noopener noreferrer">https://it-jin-developer.tistory.com/16</a><br><a href="https://seablue.tistory.com/95" target="_blank" rel="external nofollow noopener noreferrer">https://seablue.tistory.com/95</a><br><a href="https://new93helloworld.tistory.com/138" target="_blank" rel="external nofollow noopener noreferrer">https://new93helloworld.tistory.com/138</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;org-springframework-boot-web-server-PortInUseException-Port-8080-is-already-in-use&quot;&gt;&lt;a href=&quot;#org-springframework-boot-web-server-Po
      
    
    </summary>
    
    
      <category term="error" scheme="https://kyu9341.github.io/categories/error/"/>
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 웹 MVC - 정적 리소스 지원</title>
    <link href="https://kyu9341.github.io/java/2020/04/10/java_springBootStatic/"/>
    <id>https://kyu9341.github.io/java/2020/04/10/java_springBootStatic/</id>
    <published>2020-04-10T06:12:28.000Z</published>
    <updated>2020-04-13T05:56:43.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Boot-정적-리소스-지원"><a href="#Spring-Boot-정적-리소스-지원" class="headerlink" title="Spring Boot 정적 리소스 지원"></a>Spring Boot 정적 리소스 지원</h2><h3 id="정적-리소스-맵핑-“​-​”"><a href="#정적-리소스-맵핑-“​-​”" class="headerlink" title="정적 리소스 맵핑 “​/​”"></a>정적 리소스 맵핑 “​/​”</h3><ul><li>기본 리소스 위치<ul><li>classpath:/static</li><li>classpath:/public</li><li>classpath:/resources/</li><li>classpath:/META-INF/resources</li></ul></li><li>Last-Modified 헤더를 보고 304 응답을 보냄.</li><li><strong>304 상태 코드</strong> : 서버의 변경사항이 없음</li><li>파일이 변경되면 Last_Modified가 변경되는데 이것을 감지하면 리소스를 클라이언트에게 새로 보냄.</li><li>서버 변경사항이 없을 때 다시 요청을 보내면 304 코드로 응답하며 리소스를 새로 보내지 않는다. 따라서 응답이 훨씬 빨라진다.</li></ul><h4 id="spring-mvc-static-path-pattern-맵핑-설정-변경-가능"><a href="#spring-mvc-static-path-pattern-맵핑-설정-변경-가능" class="headerlink" title="spring.mvc.static-path-pattern: 맵핑 설정 변경 가능"></a>spring.mvc.static-path-pattern: 맵핑 설정 변경 가능</h4><ul><li>기본적으로 resource들은 root부터 매핑이 되어있는데, 이것을 변경하고 싶다면 application.properties에서 다음과 같이 변경하면 된다.</li><li>예) “/hello.html” =&gt; /static/hello.html</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.mvc.static-path-pattern</span>=<span class="string">/static/**</span></span><br></pre></td></tr></table></figure><p>이렇게 변경한다면 다음과 같이 /static/hello.html 로 요청해야 정상적으로 응답이 된다.</p><div style="width: 500px; height: 120px;">    <img src="https://kyu9341.github.io/img/static1.png" style="width: 500px    ; height: 120px;"></div><h4 id="WebMvcConfigurer의-addRersourceHandlers로-커스터마이징"><a href="#WebMvcConfigurer의-addRersourceHandlers로-커스터마이징" class="headerlink" title="WebMvcConfigurer의 addRersourceHandlers로 커스터마이징"></a>WebMvcConfigurer의 addRersourceHandlers로 커스터마이징</h4><ul><li>com.kwon.demospringmvc/config/WebConfig 파일<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 기존에 제공하는 리소스 핸들러는 그대로 유지하며</span></span><br><span class="line">    <span class="comment">// 원하는 리소스 핸들러만 추가할 수 있음</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/m/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/m/"</span>) <span class="comment">// 반드시 '/'로 끝나야 함</span></span><br><span class="line">                .setCachePeriod(<span class="number">20</span>); <span class="comment">// 없어도 됨.(캐시 지속시간 설정 (초))</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>위와 같이 작성하면 기존에 제공하는 리소스 핸들러는 그대로 유지하며 원하는 리소스 핸들러만 추가할 수 있음</li><li>addResourceHandlers는 리소스 등록 및 핸들러를 관리하는 객체인 ResourceHandlerRegistry를 통해 리소스 위치와 이 리소스와 매칭될 url을 등록</li><li>setCachePeriod : 캐시의 지속시간 설정(초)</li></ul><ul><li>resource/m/hello2.html<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Hello2~ Static Resource</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>이제 /m/hello2.html로 요청을 보내면 정상적인 응답을 받을 수 있다.</li></ul><div style="width: 500px; height: 120px;">    <img src="https://kyu9341.github.io/img/static2.png" style="width: 500px    ; height: 120px;"></div><h3 id="스프링-부트-웹-jar"><a href="#스프링-부트-웹-jar" class="headerlink" title="스프링 부트 웹 jar"></a>스프링 부트 웹 jar</h3><p>스프링 부트는 웹 jar에 대한 기본 매핑도 제공한다.<br><a href="https://mvnrepository.com/" target="_blank" rel="external nofollow noopener noreferrer">mvnrepository</a> 에서 원하는 웹 jar을 검색하여 의존성을 추가하면 된다.</p><ul><li>jquery의존성 추가<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.webjars.bower/jquery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars.bower<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>다음과 같이 jquery를 테스트해 보자.</li><li>static/hello.html<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Hello Static Resource</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/webjars/jquery/3.4.1/dist/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--/webjars/jquery/dist/jquery.min.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">       alert(<span class="string">"ready!"</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>이때 <code>/webjars/jquery/3.4.1/dist/jquery.min.js</code> 와 같이 버전을 명시하였는데, 만약 jquery버전을 변경할 때마다 소스 코드를 찾아서 변경해야 한다면 번거로우니 생략할 수 있다.<ul><li><code>/webjars/jquery/dist/jquery.min.js</code></li></ul></li><li>버전을 생략하려면 다음과 같은 <code>webjars-locator-core</code>라는 의존성을 추가해주어야 한다.<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.webjars/webjars-locator-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webjars-locator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.44<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>이제 <a href="http://localhost:8080/hello.html" target="_blank" rel="external nofollow noopener noreferrer">http://localhost:8080/hello.html</a> 로 요청하니 정상적으로 작동하는 것을 볼 수 있다.</p><div style="width: 800px; height: 150px;">    <img src="https://kyu9341.github.io/img/static3.png" style="width: 800px    ; height: 150px;"></div><blockquote><p>참조<br><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Boot-정적-리소스-지원&quot;&gt;&lt;a href=&quot;#Spring-Boot-정적-리소스-지원&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot 정적 리소스 지원&quot;&gt;&lt;/a&gt;Spring Boot 정적 리소스 지원&lt;/
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>스프링 부트 웹 MVC - Controller구현</title>
    <link href="https://kyu9341.github.io/java/2020/04/09/java_springBootMvc/"/>
    <id>https://kyu9341.github.io/java/2020/04/09/java_springBootMvc/</id>
    <published>2020-04-09T06:12:28.000Z</published>
    <updated>2020-04-11T02:37:06.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="스프링-부트-웹-MVC-컨트롤러-구현"><a href="#스프링-부트-웹-MVC-컨트롤러-구현" class="headerlink" title="스프링 부트 웹 MVC 컨트롤러 구현"></a>스프링 부트 웹 MVC 컨트롤러 구현</h1><p>인텔리제이에서 Spring Initializr를 통해 Web을 선택하고 프로젝트를 생성하면 pom.xml에 다음과 같은 의존성들이 자동으로 추가되어 있을 것이다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>테스트 코드<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">WebMvcTest</span>(<span class="title">UserController</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc; <span class="comment">// 웹 MVC테스트를 만들 때 주로 사용, @WebMvcTest 어노테이션 사 자동으로 빈으로 만들어줌</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    mockMvc.perform(get(<span class="string">"/hello"</span>))</span><br><span class="line">    .andExpect(status().isOk())</span><br><span class="line">    .andExpect(content().string(<span class="string">"hello"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>위의 get에서 빨간줄이 생긴다면 아래의 두 방법으로 대체할 수 있다.</li></ul><p>1.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>))</span><br><span class="line">        .andExpect(status().isOk())</span><br><span class="line">        .andExpect(content().string(<span class="string">"hello"</span>));</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get(<span class="string">"/hello"</span>);</span><br><span class="line">mockMvc.perform(builder)</span><br><span class="line">        .andExpect(status().isOk())</span><br><span class="line">        .andExpect(content().string(<span class="string">"hello"</span>));</span><br></pre></td></tr></table></figure><p>메인 패키지 아래에 user패키지에 UserController를 생성</p><ul><li><p>소스 코드</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemospringmvcApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemospringmvcApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="comment">// @ResponseBody가 생략되어 있음</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// 그냥 @Controller라면 @ResponseBody를 꼭 붙여주어야 함</span></span><br><span class="line">      <span class="comment">// 그래야 MessageConverter가 적용이 된다.</span></span><br><span class="line">      <span class="comment">// 그냥 @Controller인 경우에는 ViewResolver를 통 hello라는 이름에 해당하는 뷰를 찾으려 시도한다.</span></span><br><span class="line">      <span class="comment">// 하지만 @RestController가 붙어있으면 자동적으로 StringMessageConverter가 사용되어</span></span><br><span class="line">       <span class="comment">// HTTP 응답 본문에 들어가게 된다.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 특별한 설정 없이 스프링 부트 MVC개발을 바로 시작할 수 있다.<br>스프링 부트에서 제공해주는 기본 설정 덕분 - (WebMvcAutoConfiguration)</p></li><li><p>@RestController</p><ul><li>@RestController 어노테이션은 스프링 4점대 버전부터 지원하는 어노테이션으로, 컨트롤러 클래스에 @RestController 만 붙이면 메서드에 @ResponseBody 어노테이션을 붙이지 않아도 문자열과 JSON 등을 전송할 수 있다. 뷰를 리턴하는 메서드들을 가지고 있는 @Controller와는 다르게 @RestController는 문자열, 객체 등을 리턴하는 메서드들을 가지고 있다.</li></ul></li></ul><h2 id="HttpMessageConverters"><a href="#HttpMessageConverters" class="headerlink" title="HttpMessageConverters"></a>HttpMessageConverters</h2><ul><li>HTTP 요청 본문을 객체로 변경하거나, 객체를 HTTP 응답 본문으로 변경할 때 사용.<ul><li>{“username”:”keesun”, “password”:”123”} &lt;-&gt; User<ul><li>@ReuqestBody</li><li>@ResponseBody</li></ul></li></ul></li><li>HttpMessageConverters는 스프링 프레임워크에서 제공하는 인터페이스며 스프링 MVC의 일부분</li><li>만일 HTTP에 content-type으로 JSON이 들어오면 (또한 본문도 JSON) JsonConverter로 바뀜</li><li>content-type이 문자열이면 StringMessageConverter가 사용됨</li></ul><ul><li><p>테스트 코드</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">WebMvcTest</span>(<span class="title">UserController</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(<span class="string">"hello"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// user를 생성하는 테스트</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser_JSON</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String userJson = <span class="string">"&#123;\"username\":\"kwon\", \"password\":\"123\"&#125;"</span>;</span><br><span class="line">        mockMvc.perform(post(<span class="string">"/users/create"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .content(userJson))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(jsonPath(<span class="string">"$.username"</span>, is(equalTo(<span class="string">"kwon"</span>))))</span><br><span class="line">                .andExpect(jsonPath(<span class="string">"$.password"</span>, is(equalTo(<span class="string">"123"</span>))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>소스 코드</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// @ResponseBody가 생략되어 있음</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// 그냥 @Controller라면 @ResponseBody를 꼭 붙여주어야 함</span></span><br><span class="line">      <span class="comment">// 그래야 MessageConverter가 적용이 된다.</span></span><br><span class="line">      <span class="comment">// 그냥 @Controller인 경우에는 ViewResolver를 통 hello라는 이름에 해당하는 뷰를 찾으려 시도한다.</span></span><br><span class="line">      <span class="comment">// 하지만 @RestController가 붙어있으면 자동적으로 StringMessageConverter가 사용되어</span></span><br><span class="line">       <span class="comment">// HTTP 응답 본문에 들어가게 된다.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/users/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">create</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="ViewResolver"><a href="#ViewResolver" class="headerlink" title="ViewResolver"></a>ViewResolver</h2><ul><li><strong>ViewResolver</strong> : 스프링에서 Controller에서 반환한 값(ModelAndView 혹은 Model)을 통해 뷰를 만드는 역할</li><li><strong>ContentNegotiatingViewResolver</strong> : 동일한 URI에서 HTTP Request에 있는 Content-type 및 Accept 헤더를 기준으로 다양한 Content-type으로 응답할 수 있게 하는 ViewResolver</li></ul><p>응답을 XML로 바꾸어 보아도 정상적으로 동작한다. 단, XML로 내보내고 싶은 경우에는 다음의 의존성을 추가해야 한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>테스트 코드<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">WebMvcTest</span>(<span class="title">UserController</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(<span class="string">"hello"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// user를 생성하는 테스트</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser_JSON</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String userJson = <span class="string">"&#123;\"username\":\"kwon\", \"password\":\"123\"&#125;"</span>;</span><br><span class="line">        mockMvc.perform(post(<span class="string">"/users/create"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .content(userJson))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(jsonPath(<span class="string">"$.username"</span>, is(equalTo(<span class="string">"kwon"</span>))))</span><br><span class="line">                .andExpect(jsonPath(<span class="string">"$.password"</span>, is(equalTo(<span class="string">"123"</span>))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser_XML</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String userJson = <span class="string">"&#123;\"username\":\"kwon\", \"password\":\"123\"&#125;"</span>;</span><br><span class="line">        mockMvc.perform(post(<span class="string">"/users/create"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .accept(MediaType.APPLICATION_XML)</span><br><span class="line">                .content(userJson))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(xpath(<span class="string">"/User/username"</span>).string(<span class="string">"kwon"</span>))</span><br><span class="line">                .andExpect(xpath(<span class="string">"/User/password"</span>).string(<span class="string">"123"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>참조</p><p><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard" target="_blank" rel="external nofollow noopener noreferrer">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard</a><br><a href="https://webcoding.tistory.com/entry/Spring-REST-API-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0" target="_blank" rel="external nofollow noopener noreferrer">https://webcoding.tistory.com/entry/Spring-REST-API-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;스프링-부트-웹-MVC-컨트롤러-구현&quot;&gt;&lt;a href=&quot;#스프링-부트-웹-MVC-컨트롤러-구현&quot; class=&quot;headerlink&quot; title=&quot;스프링 부트 웹 MVC 컨트롤러 구현&quot;&gt;&lt;/a&gt;스프링 부트 웹 MVC 컨트롤러 구현&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="java" scheme="https://kyu9341.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>백준 18436번 수열과 쿼리 37</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/09/algorithm18436/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/09/algorithm18436/</id>
    <published>2020-04-08T15:11:12.000Z</published>
    <updated>2020-04-08T15:30:49.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-18436"><a href="#Problem-18436" class="headerlink" title="Problem 18436"></a>Problem 18436</h1><h2 id="수열과-쿼리-37"><a href="#수열과-쿼리-37" class="headerlink" title="수열과 쿼리 37"></a>수열과 쿼리 37</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>길이가 N인 수열 A1, A2, …, AN이 있다. 이때, 다음 쿼리를 수행하는 프로그램을 작성하시오.</p><ul><li>1 i x: Ai를 x로 바꾼다.</li><li>2 l r: l ≤ i ≤ r에 속하는 모든 Ai중에서 짝수의 개수를 출력한다.</li><li>3 l r: l ≤ i ≤ r에 속하는 모든 Ai중에서 홀수의 개수를 출력한다.<br>수열의 인덱스는 1부터 시작한다.</li></ul><h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><p>첫째 줄에 수열의 크기 N (1 ≤ N ≤ 100,000)이 주어진다.</p><p>둘째 줄에는 A1, A2, …, AN이 주어진다. (1 ≤ Ai ≤ 109)</p><p>셋째 줄에는 쿼리의 개수 M (1 ≤ M ≤ 100,000)이 주어진다.</p><p>넷째 줄부터 M개의 줄에는 쿼리가 한 줄에 하나씩 주어진다. (1 ≤ i ≤ N, 1 ≤ l ≤ r ≤ N, 1 ≤ x ≤ 109)</p><h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>2, 3번 쿼리의 정답을 한 줄에 하나씩 출력한다.</p><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://www.acmicpc.net/problem/18436" target="_blank" rel="external nofollow noopener noreferrer">https://www.acmicpc.net/problem/18436</a></p><h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><p>6<br>1 2 3 4 5 6<br>4<br>2 2 5<br>3 1 4<br>1 5 4<br>2 1 6</p><h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><p>2<br>2<br>4</p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li><p>세그먼트 트리를 이용하여 리프 노드에 a의 해당 인덱스의 수가 홀수라면 1, 짝수라면 0을 넣는다.</p></li><li><p>홀수의 개수를 각 노드에 저장 (구간에서 홀수의 개수를 빼면 짝수의 개수)</p></li><li><p>1번 쿼리의 경우 트리는 홀짝만 저장하므로 새로 입력된 수(x)가 이전 수와 홀짝이 다른 경우에만 update함수를 수행한다.</p><ul><li>x가 짝수라면 트리의 현재 노드를 1감소시킨다.(홀수의 개수 1감소)</li><li>홀수라면 트리의 현재 노드를 1증가시킨다.(홀수의 개수 1증가)</li><li>리프 노드에 도달하면 새로 입력된 수의 홀짝으로 변경</li></ul></li><li><p>2, 3번 쿼리의 경우 각 구간의 홀수의 개수를 리턴한다.</p><ul><li>2번 쿼리(짝수)인 경우 구간의 원소의 개수에서 홀수의 개수를 빼주어 짝수의 개수를 출력한다.</li><li>3번 쿼리(홀수)인 경우 바로 홀수의 개수를 출력한다.</li></ul></li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100001</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tree[MAX * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> node)</span> <span class="comment">// 세그먼트 트리 구성</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">// 리프 노드에 a의 해당 인덱스의 수가 홀수라면 1, 짝수라면 0을 넣는다.</span></span><br><span class="line"><span class="keyword">if</span> (start == <span class="built_in">end</span>) <span class="keyword">return</span> tree[node] = a[start] % <span class="number">2</span> == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (start + <span class="built_in">end</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 홀수의 개수를 각 노드에 저장 (구간에서 홀수의 개수를 빼면 짝수의 개수)</span></span><br><span class="line"><span class="keyword">return</span> tree[node] = init(start, mid, node * <span class="number">2</span>) + init(mid + <span class="number">1</span>, <span class="built_in">end</span>, node * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> node, <span class="keyword">int</span> index, <span class="keyword">int</span> x, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">// 새로 입력된 수가 이전 수와 홀짝이 다른 경우만 실행</span></span><br><span class="line"><span class="keyword">if</span> (start &gt; index || index &gt; <span class="built_in">end</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) tree[node]--; <span class="comment">// 짝수라면 홀수의 개수를 1감소</span></span><br><span class="line"><span class="keyword">else</span> tree[node]++; <span class="comment">// 홀수라면 1증가</span></span><br><span class="line"><span class="keyword">if</span> (start == <span class="built_in">end</span>)</span><br><span class="line">&#123;<span class="comment">// 홀짝을 변경</span></span><br><span class="line">tree[node] = value;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (start + <span class="built_in">end</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">update(start, mid, node * <span class="number">2</span>, index, x, value);</span><br><span class="line">update(mid + <span class="number">1</span>, <span class="built_in">end</span>, node * <span class="number">2</span> + <span class="number">1</span>, index, x, value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> node, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (start &gt; right || <span class="built_in">end</span> &lt; left) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= start &amp;&amp; <span class="built_in">end</span> &lt;= right) <span class="keyword">return</span> tree[node]; <span class="comment">// 홀수의 개수를 리턴</span></span><br><span class="line"><span class="keyword">int</span> mid = (start + <span class="built_in">end</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> query(start, mid, node * <span class="number">2</span>, left, right) + query(mid + <span class="number">1</span>, <span class="built_in">end</span>, node * <span class="number">2</span> + <span class="number">1</span>, left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">init(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q, index, x, left, right;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">if</span> (q == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; index &gt;&gt; x;</span><br><span class="line"><span class="comment">// 홀짝이 다른 경우만 update</span></span><br><span class="line"><span class="keyword">if</span> (a[index] % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; x % <span class="number">2</span> == <span class="number">1</span>) update(<span class="number">1</span>, n, <span class="number">1</span>, index, x, <span class="number">1</span>); <span class="comment">// 홀수로 바뀐 경우</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[index] % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; x % <span class="number">2</span> == <span class="number">0</span>) update(<span class="number">1</span>, n, <span class="number">1</span>, index, x, <span class="number">0</span>); <span class="comment">// 짝수로 바뀐 경우</span></span><br><span class="line">a[index] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (q == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; left &gt;&gt; right;</span><br><span class="line"><span class="keyword">int</span> num = right - left + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 구간에서 홀수의 개수를 빼면 짝수의 개수</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num - query(<span class="number">1</span>, n, <span class="number">1</span>, left, right) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (q == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; left &gt;&gt; right;</span><br><span class="line"><span class="comment">// 홀수의 개수</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; query(<span class="number">1</span>, n, <span class="number">1</span>, left, right) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-18436&quot;&gt;&lt;a href=&quot;#Problem-18436&quot; class=&quot;headerlink&quot; title=&quot;Problem 18436&quot;&gt;&lt;/a&gt;Problem 18436&lt;/h1&gt;&lt;h2 id=&quot;수열과-쿼리-37&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>백준 16975번 수열과 쿼리 21</title>
    <link href="https://kyu9341.github.io/algorithm/2020/04/06/algorithm16975/"/>
    <id>https://kyu9341.github.io/algorithm/2020/04/06/algorithm16975/</id>
    <published>2020-04-05T16:11:12.000Z</published>
    <updated>2020-04-05T16:12:55.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-16975"><a href="#Problem-16975" class="headerlink" title="Problem 16975"></a>Problem 16975</h1><h2 id="수열과-쿼리-21"><a href="#수열과-쿼리-21" class="headerlink" title="수열과 쿼리 21"></a>수열과 쿼리 21</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>길이가 N인 수열 A1, A2, …, AN이 주어진다. 이때, 다음 쿼리를 수행하는 프로그램을 작성하시오.</p><ul><li>1 i j k: Ai, Ai+1, …, Aj에 k를 더한다.</li><li>2 x: Ax 를 출력한다.</li></ul><h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><p>첫째 줄에 수열의 크기 N (1 ≤ N ≤ 100,000)이 주어진다.</p><p>둘째 줄에는 A1, A2, …, AN이 주어진다. (1 ≤ Ai ≤ 1,000,000)</p><p>셋째 줄에는 쿼리의 개수 M (1 ≤ M ≤ 100,000)이 주어진다.</p><p>넷째 줄부터 M개의 줄에는 쿼리가 한 줄에 하나씩 주어진다. 1번 쿼리의 경우 1 ≤ i ≤ j ≤ N, -1,000,000 ≤ k ≤ 1,000,000 이고, 2번 쿼리의 경우 1 ≤ x ≤ N이다. 2번 쿼리는 하나 이상 주어진다.</p><h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>2번 쿼리가 주어질 때마다 출력한다.</p><h3 id="문제-링크"><a href="#문제-링크" class="headerlink" title="문제 링크"></a>문제 링크</h3><p><a href="https://www.acmicpc.net/problem/16975" target="_blank" rel="external nofollow noopener noreferrer">https://www.acmicpc.net/problem/16975</a></p><h3 id="예제-입력-1"><a href="#예제-입력-1" class="headerlink" title="예제 입력 1"></a>예제 입력 1</h3><p>5<br>1 2 3 4 5<br>4<br>1 3 4 6<br>2 3<br>1 1 3 -2<br>2 3</p><h3 id="예제-출력-1"><a href="#예제-출력-1" class="headerlink" title="예제 출력 1"></a>예제 출력 1</h3><p>9<br>7</p><h3 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h3><ul><li>세그먼트 트리를 이용하여 해결하였다.</li><li>리프 노드를 제외한 나머지 노드를 0으로 초기화한다.</li><li>1번 쿼리인 경우 update함수에서<ul><li>범위를 벗어난다면 현재 노드를 리턴하고</li><li>완전히 범위 내에 들어온 경우 각 노드에 더해질 k값들을 모두 누적하여 쿼리 수행 시 거쳐가는 모든 노드의 값을 더할 수 있도록 구성한다.</li></ul></li><li>2번 쿼리를 수행하는 경우<ul><li>리프 노드까지 이동하며 지금까지 각 노드에 누적된 값을 모두 더하여 리턴한다.</li></ul></li></ul><h3 id="코드-설명"><a href="#코드-설명" class="headerlink" title="코드 설명"></a>코드 설명</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100000</span>;</span><br><span class="line"><span class="comment">// 값이 누적되면 정수 범위를 벗어나므로 long long형으로 선언</span></span><br><span class="line">ll a[MAX + <span class="number">1</span>];</span><br><span class="line">ll tree[MAX * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> node)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">// 세그먼트 트리 생성 리프 노드를 제외한 나머지 노드는 0으로 초기화</span></span><br><span class="line"><span class="keyword">if</span> (start == <span class="built_in">end</span>)</span><br><span class="line">&#123;</span><br><span class="line">tree[node] = a[start];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">tree[node] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (start + <span class="built_in">end</span>) / <span class="number">2</span>;</span><br><span class="line">init(start, mid, node * <span class="number">2</span>);</span><br><span class="line">init(mid + <span class="number">1</span>, <span class="built_in">end</span>, node * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> node, <span class="keyword">int</span> left, <span class="keyword">int</span> right, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">// 각 노드에 더해질 k값들을 모두 누적하여 쿼리 수행 시 거쳐가는 모든 노드의 값을 더할 수 있도록 구성.</span></span><br><span class="line"><span class="comment">// 범위를 벗어난 경우 리턴</span></span><br><span class="line"><span class="keyword">if</span> (start &gt; right || <span class="built_in">end</span> &lt; left) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// 완전히 범위 내에 들어온 경우 현재 노드에 k를 누적</span></span><br><span class="line"><span class="keyword">if</span> (left &lt;= start &amp;&amp; <span class="built_in">end</span> &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line">tree[node] += k;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (start + <span class="built_in">end</span>) / <span class="number">2</span>;</span><br><span class="line">update(start, mid, node * <span class="number">2</span>, left, right, k);</span><br><span class="line">update(mid + <span class="number">1</span>, <span class="built_in">end</span>, node * <span class="number">2</span> + <span class="number">1</span>, left, right, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getX</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> node, <span class="keyword">int</span> index, ll ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">// index에 맞는 리프 노드까지 이동하며 거치는 노드의 값을 모두 누적한다.</span></span><br><span class="line"><span class="keyword">if</span> (index &lt; start || index &gt; <span class="built_in">end</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">ans += tree[node];</span><br><span class="line"><span class="keyword">if</span> (start == <span class="built_in">end</span>) <span class="keyword">return</span> ans; <span class="comment">// 리프 노드에 도달하면 누적된 값 리턴</span></span><br><span class="line"><span class="keyword">int</span> mid = (start + <span class="built_in">end</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> getX(start, mid, node * <span class="number">2</span>, index, ans) + getX(mid + <span class="number">1</span>, <span class="built_in">end</span>, node * <span class="number">2</span> + <span class="number">1</span>, index, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line">init(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q, left, right, index;</span><br><span class="line">ll k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">if</span> (q == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; left &gt;&gt; right &gt;&gt; k;</span><br><span class="line">update(<span class="number">1</span>, n, <span class="number">1</span>, left, right, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (q == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; index;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getX(<span class="number">1</span>, n, <span class="number">1</span>, index, <span class="number">0</span>) &lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-16975&quot;&gt;&lt;a href=&quot;#Problem-16975&quot; class=&quot;headerlink&quot; title=&quot;Problem 16975&quot;&gt;&lt;/a&gt;Problem 16975&lt;/h1&gt;&lt;h2 id=&quot;수열과-쿼리-21&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="algorithm" scheme="https://kyu9341.github.io/categories/algorithm/"/>
    
    
  </entry>
  
</feed>
